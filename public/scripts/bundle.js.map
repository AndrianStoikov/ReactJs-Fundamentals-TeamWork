{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/alt/lib/actions/index.js","node_modules/alt/lib/functions.js","node_modules/alt/lib/index.js","node_modules/alt/lib/store/AltStore.js","node_modules/alt/lib/store/StoreMixin.js","node_modules/alt/lib/store/index.js","node_modules/alt/lib/utils/AltUtils.js","node_modules/alt/lib/utils/StateFunctions.js","node_modules/fbjs/lib/emptyFunction.js","node_modules/fbjs/lib/invariant.js","node_modules/fbjs/lib/warning.js","node_modules/flux/index.js","node_modules/flux/lib/Dispatcher.js","node_modules/flux/node_modules/fbjs/lib/invariant.js","node_modules/invariant/browser.js","node_modules/is-promise/index.js","node_modules/process/browser.js","node_modules/prop-types/checkPropTypes.js","node_modules/prop-types/factoryWithThrowingShims.js","node_modules/prop-types/factoryWithTypeCheckers.js","node_modules/prop-types/index.js","node_modules/prop-types/lib/ReactPropTypesSecret.js","node_modules/react-router-dom/BrowserRouter.js","node_modules/react-router-dom/HashRouter.js","node_modules/react-router-dom/Link.js","node_modules/react-router-dom/MemoryRouter.js","node_modules/react-router-dom/NavLink.js","node_modules/react-router-dom/Prompt.js","node_modules/react-router-dom/Redirect.js","node_modules/react-router-dom/Route.js","node_modules/react-router-dom/Router.js","node_modules/react-router-dom/StaticRouter.js","node_modules/react-router-dom/Switch.js","node_modules/react-router-dom/index.js","node_modules/react-router-dom/matchPath.js","node_modules/react-router-dom/node_modules/history/DOMUtils.js","node_modules/react-router-dom/node_modules/history/LocationUtils.js","node_modules/react-router-dom/node_modules/history/PathUtils.js","node_modules/react-router-dom/node_modules/history/createBrowserHistory.js","node_modules/react-router-dom/node_modules/history/createHashHistory.js","node_modules/react-router-dom/node_modules/history/createTransitionManager.js","node_modules/react-router-dom/withRouter.js","node_modules/resolve-pathname/index.js","node_modules/transmitter/dist/transmitter.js","node_modules/value-equal/index.js","node_modules/warning/browser.js","source/client/actions/BlockUserActions.js","source/client/actions/FooterActions.js","source/client/actions/FormActions.js","source/client/actions/HomeActions.js","source/client/actions/NavbarActions.js","source/client/actions/PostAddActions.js","source/client/actions/PostEditActions.js","source/client/actions/UserActions.js","source/client/alt.js","source/client/components/App.js","source/client/components/Auth.js","source/client/components/BlockUser.js","source/client/components/Footer.js","source/client/components/Home.js","source/client/components/Navbar.js","source/client/components/UserLogin.js","source/client/components/UserProfile.js","source/client/components/UserRegister.js","source/client/components/form/Form.js","source/client/components/form/RadioElement.js","source/client/components/form/RadioGroup.js","source/client/components/form/Submit.js","source/client/components/form/TextGroup.js","source/client/components/post/PostAdd.js","source/client/components/post/PostEdit.js","source/client/components/sub-components/CommentsForm.js","source/client/components/sub-components/NavbarUserMenu.js","source/client/components/sub-components/PostCard.js","source/client/components/sub-components/PostCommentsPanel.js","source/client/components/sub-components/PostInfo.js","source/client/components/sub-components/PostPanelsToggle.js","source/client/components/sub-components/PostVotePanel.js","source/client/components/sub-components/user-profile/UserInfo.js","source/client/components/sub-components/user-profile/UserPosts.js","source/client/components/sub-components/user-profile/UserPostsPanel.js","source/client/main.js","source/client/routes.js","source/client/stores/BlockUserStore.js","source/client/stores/FooterStore.js","source/client/stores/FormStore.js","source/client/stores/HomeStore.js","source/client/stores/NavbarStore.js","source/client/stores/PostAddStore.js","source/client/stores/PostEditStore.js","source/client/stores/UserStore.js","source/client/utilities/Helpers.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnxjnpHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACjtOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnxhgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdzrvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtlnUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5DA;;;;;;;;IAEM,gB;AACJ,8BAAe;AAAA;;AACb,SAAK,eAAL,CACE,qBADF,EAEE,uBAFF,EAGE,kBAHF,EAIE,eAJF;AAMD;;;;oCAEgB,I,EAAM;AAAA;;AACrB,UAAI,UAAU;AACZ,aAAK,6BAA6B,KAAK,gBAD3B;AAEZ,gBAAQ,KAFI;AAGZ,cAAM,KAAK,SAAL,CAAe,IAAf,CAHM;AAIZ,qBAAa;AAJD,OAAd;;AAOA,UAAI,gBAAgB,KAAK,aAAzB;;AAEA,QAAE,IAAF,CAAO,OAAP,EACG,IADH,CACQ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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = makeAction;\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _AltUtils = require('../utils/AltUtils');\n\nvar utils = _interopRequireWildcard(_AltUtils);\n\nvar _isPromise = require('is-promise');\n\nvar _isPromise2 = _interopRequireDefault(_isPromise);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction makeAction(alt, namespace, name, implementation, obj) {\n  var id = utils.uid(alt._actionsRegistry, String(namespace) + '.' + String(name));\n  alt._actionsRegistry[id] = 1;\n\n  var data = { id: id, namespace: namespace, name: name };\n\n  var dispatch = function dispatch(payload) {\n    return alt.dispatch(id, payload, data);\n  };\n\n  // the action itself\n  var action = function action() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var invocationResult = implementation.apply(obj, args);\n    var actionResult = invocationResult;\n\n    // async functions that return promises should not be dispatched\n    if (invocationResult !== undefined && !(0, _isPromise2['default'])(invocationResult)) {\n      if (fn.isFunction(invocationResult)) {\n        // inner function result should be returned as an action result\n        actionResult = invocationResult(dispatch, alt);\n      } else {\n        dispatch(invocationResult);\n      }\n    }\n\n    if (invocationResult === undefined) {\n      utils.warn('An action was called but nothing was dispatched');\n    }\n\n    return actionResult;\n  };\n  action.defer = function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return setTimeout(function () {\n      return action.apply(null, args);\n    });\n  };\n  action.id = id;\n  action.data = data;\n\n  // ensure each reference is unique in the namespace\n  var container = alt.actions[namespace];\n  var namespaceId = utils.uid(container, name);\n  container[namespaceId] = action;\n\n  // generate a constant\n  var constant = utils.formatAsConstant(namespaceId);\n  container[constant] = id;\n\n  return action;\n}\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isMutableObject = isMutableObject;\nexports.eachObject = eachObject;\nexports.assign = assign;\nvar isFunction = exports.isFunction = function isFunction(x) {\n  return typeof x === 'function';\n};\n\nfunction isMutableObject(target) {\n  var Ctor = target.constructor;\n\n  return !!target && Object.prototype.toString.call(target) === '[object Object]' && isFunction(Ctor) && !Object.isFrozen(target) && (Ctor instanceof Ctor || target.type === 'AltStore');\n}\n\nfunction eachObject(f, o) {\n  o.forEach(function (from) {\n    Object.keys(Object(from)).forEach(function (key) {\n      f(key, from[key]);\n    });\n  });\n}\n\nfunction assign(target) {\n  for (var _len = arguments.length, source = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    source[_key - 1] = arguments[_key];\n  }\n\n  eachObject(function (key, value) {\n    return target[key] = value;\n  }, source);\n  return target;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _flux = require('flux');\n\nvar _StateFunctions = require('./utils/StateFunctions');\n\nvar StateFunctions = _interopRequireWildcard(_StateFunctions);\n\nvar _functions = require('./functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _store = require('./store');\n\nvar store = _interopRequireWildcard(_store);\n\nvar _AltUtils = require('./utils/AltUtils');\n\nvar utils = _interopRequireWildcard(_AltUtils);\n\nvar _actions = require('./actions');\n\nvar _actions2 = _interopRequireDefault(_actions);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /* global window */\n\n\nvar Alt = function () {\n  function Alt() {\n    var config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\n    _classCallCheck(this, Alt);\n\n    this.config = config;\n    this.serialize = config.serialize || JSON.stringify;\n    this.deserialize = config.deserialize || JSON.parse;\n    this.dispatcher = config.dispatcher || new _flux.Dispatcher();\n    this.batchingFunction = config.batchingFunction || function (callback) {\n      return callback();\n    };\n    this.actions = { global: {} };\n    this.stores = {};\n    this.storeTransforms = config.storeTransforms || [];\n    this.trapAsync = false;\n    this._actionsRegistry = {};\n    this._initSnapshot = {};\n    this._lastSnapshot = {};\n  }\n\n  Alt.prototype.dispatch = function () {\n    function dispatch(action, data, details) {\n      var _this = this;\n\n      this.batchingFunction(function () {\n        var id = Math.random().toString(18).substr(2, 16);\n\n        // support straight dispatching of FSA-style actions\n        if (action.hasOwnProperty('type') && action.hasOwnProperty('payload')) {\n          var fsaDetails = {\n            id: action.type,\n            namespace: action.type,\n            name: action.type\n          };\n          return _this.dispatcher.dispatch(utils.fsa(id, action.type, action.payload, fsaDetails));\n        }\n\n        if (action.id && action.dispatch) {\n          return utils.dispatch(id, action, data, _this);\n        }\n\n        return _this.dispatcher.dispatch(utils.fsa(id, action, data, details));\n      });\n    }\n\n    return dispatch;\n  }();\n\n  Alt.prototype.createUnsavedStore = function () {\n    function createUnsavedStore(StoreModel) {\n      var key = StoreModel.displayName || '';\n      store.createStoreConfig(this.config, StoreModel);\n      var Store = store.transformStore(this.storeTransforms, StoreModel);\n\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);\n    }\n\n    return createUnsavedStore;\n  }();\n\n  Alt.prototype.createStore = function () {\n    function createStore(StoreModel, iden) {\n      var key = iden || StoreModel.displayName || StoreModel.name || '';\n      store.createStoreConfig(this.config, StoreModel);\n      var Store = store.transformStore(this.storeTransforms, StoreModel);\n\n      /* istanbul ignore next */\n      if (module.hot) delete this.stores[key];\n\n      if (this.stores[key] || !key) {\n        if (this.stores[key]) {\n          utils.warn('A store named ' + String(key) + ' already exists, double check your store ' + 'names or pass in your own custom identifier for each store');\n        } else {\n          utils.warn('Store name was not specified');\n        }\n\n        key = utils.uid(this.stores, key);\n      }\n\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      var storeInstance = fn.isFunction(Store) ? store.createStoreFromClass.apply(store, [this, Store, key].concat(args)) : store.createStoreFromObject(this, Store, key);\n\n      this.stores[key] = storeInstance;\n      StateFunctions.saveInitialSnapshot(this, key);\n\n      return storeInstance;\n    }\n\n    return createStore;\n  }();\n\n  Alt.prototype.generateActions = function () {\n    function generateActions() {\n      var actions = { name: 'global' };\n\n      for (var _len3 = arguments.length, actionNames = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        actionNames[_key3] = arguments[_key3];\n      }\n\n      return this.createActions(actionNames.reduce(function (obj, action) {\n        obj[action] = utils.dispatchIdentity;\n        return obj;\n      }, actions));\n    }\n\n    return generateActions;\n  }();\n\n  Alt.prototype.createAction = function () {\n    function createAction(name, implementation, obj) {\n      return (0, _actions2['default'])(this, 'global', name, implementation, obj);\n    }\n\n    return createAction;\n  }();\n\n  Alt.prototype.createActions = function () {\n    function createActions(ActionsClass) {\n      var _this3 = this;\n\n      var exportObj = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var actions = {};\n      var key = utils.uid(this._actionsRegistry, ActionsClass.displayName || ActionsClass.name || 'Unknown');\n\n      if (fn.isFunction(ActionsClass)) {\n        fn.assign(actions, utils.getPrototypeChain(ActionsClass));\n\n        var ActionsGenerator = function (_ActionsClass) {\n          _inherits(ActionsGenerator, _ActionsClass);\n\n          function ActionsGenerator() {\n            _classCallCheck(this, ActionsGenerator);\n\n            for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n              args[_key5] = arguments[_key5];\n            }\n\n            return _possibleConstructorReturn(this, _ActionsClass.call.apply(_ActionsClass, [this].concat(args)));\n          }\n\n          ActionsGenerator.prototype.generateActions = function () {\n            function generateActions() {\n              for (var _len6 = arguments.length, actionNames = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n                actionNames[_key6] = arguments[_key6];\n              }\n\n              actionNames.forEach(function (actionName) {\n                actions[actionName] = utils.dispatchIdentity;\n              });\n            }\n\n            return generateActions;\n          }();\n\n          return ActionsGenerator;\n        }(ActionsClass);\n\n        for (var _len4 = arguments.length, argsForConstructor = Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n          argsForConstructor[_key4 - 2] = arguments[_key4];\n        }\n\n        fn.assign(actions, new (Function.prototype.bind.apply(ActionsGenerator, [null].concat(argsForConstructor)))());\n      } else {\n        fn.assign(actions, ActionsClass);\n      }\n\n      this.actions[key] = this.actions[key] || {};\n\n      fn.eachObject(function (actionName, action) {\n        if (!fn.isFunction(action)) {\n          exportObj[actionName] = action;\n          return;\n        }\n\n        // create the action\n        exportObj[actionName] = (0, _actions2['default'])(_this3, key, actionName, action, exportObj);\n\n        // generate a constant\n        var constant = utils.formatAsConstant(actionName);\n        exportObj[constant] = exportObj[actionName].id;\n      }, [actions]);\n\n      return exportObj;\n    }\n\n    return createActions;\n  }();\n\n  Alt.prototype.takeSnapshot = function () {\n    function takeSnapshot() {\n      for (var _len7 = arguments.length, storeNames = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        storeNames[_key7] = arguments[_key7];\n      }\n\n      var state = StateFunctions.snapshot(this, storeNames);\n      fn.assign(this._lastSnapshot, state);\n      return this.serialize(state);\n    }\n\n    return takeSnapshot;\n  }();\n\n  Alt.prototype.rollback = function () {\n    function rollback() {\n      StateFunctions.setAppState(this, this.serialize(this._lastSnapshot), function (storeInst) {\n        storeInst.lifecycle('rollback');\n        storeInst.emitChange();\n      });\n    }\n\n    return rollback;\n  }();\n\n  Alt.prototype.recycle = function () {\n    function recycle() {\n      for (var _len8 = arguments.length, storeNames = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        storeNames[_key8] = arguments[_key8];\n      }\n\n      var initialSnapshot = storeNames.length ? StateFunctions.filterSnapshots(this, this._initSnapshot, storeNames) : this._initSnapshot;\n\n      StateFunctions.setAppState(this, this.serialize(initialSnapshot), function (storeInst) {\n        storeInst.lifecycle('init');\n        storeInst.emitChange();\n      });\n    }\n\n    return recycle;\n  }();\n\n  Alt.prototype.flush = function () {\n    function flush() {\n      var state = this.serialize(StateFunctions.snapshot(this));\n      this.recycle();\n      return state;\n    }\n\n    return flush;\n  }();\n\n  Alt.prototype.bootstrap = function () {\n    function bootstrap(data) {\n      StateFunctions.setAppState(this, data, function (storeInst, state) {\n        storeInst.lifecycle('bootstrap', state);\n        storeInst.emitChange();\n      });\n    }\n\n    return bootstrap;\n  }();\n\n  Alt.prototype.prepare = function () {\n    function prepare(storeInst, payload) {\n      var data = {};\n      if (!storeInst.displayName) {\n        throw new ReferenceError('Store provided does not have a name');\n      }\n      data[storeInst.displayName] = payload;\n      return this.serialize(data);\n    }\n\n    return prepare;\n  }();\n\n  // Instance type methods for injecting alt into your application as context\n\n  Alt.prototype.addActions = function () {\n    function addActions(name, ActionsClass) {\n      for (var _len9 = arguments.length, args = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n        args[_key9 - 2] = arguments[_key9];\n      }\n\n      this.actions[name] = Array.isArray(ActionsClass) ? this.generateActions.apply(this, ActionsClass) : this.createActions.apply(this, [ActionsClass].concat(args));\n    }\n\n    return addActions;\n  }();\n\n  Alt.prototype.addStore = function () {\n    function addStore(name, StoreModel) {\n      for (var _len10 = arguments.length, args = Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {\n        args[_key10 - 2] = arguments[_key10];\n      }\n\n      this.createStore.apply(this, [StoreModel, name].concat(args));\n    }\n\n    return addStore;\n  }();\n\n  Alt.prototype.getActions = function () {\n    function getActions(name) {\n      return this.actions[name];\n    }\n\n    return getActions;\n  }();\n\n  Alt.prototype.getStore = function () {\n    function getStore(name) {\n      return this.stores[name];\n    }\n\n    return getStore;\n  }();\n\n  Alt.debug = function () {\n    function debug(name, alt, win) {\n      var key = 'alt.js.org';\n      var context = win;\n      if (!context && typeof window !== 'undefined') {\n        context = window;\n      }\n      if (typeof context !== 'undefined') {\n        context[key] = context[key] || [];\n        context[key].push({ name: name, alt: alt });\n      }\n      return alt;\n    }\n\n    return debug;\n  }();\n\n  return Alt;\n}();\n\nexports['default'] = Alt;\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _transmitter = require('transmitter');\n\nvar _transmitter2 = _interopRequireDefault(_transmitter);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar AltStore = function () {\n  function AltStore(alt, model, state, StoreModel) {\n    var _this = this;\n\n    _classCallCheck(this, AltStore);\n\n    var lifecycleEvents = model.lifecycleEvents;\n    this.transmitter = (0, _transmitter2['default'])();\n    this.lifecycle = function (event, x) {\n      if (lifecycleEvents[event]) lifecycleEvents[event].publish(x);\n    };\n    this.state = state;\n\n    this.alt = alt;\n    this.preventDefault = false;\n    this.displayName = model.displayName;\n    this.boundListeners = model.boundListeners;\n    this.StoreModel = StoreModel;\n    this.reduce = model.reduce || function (x) {\n      return x;\n    };\n    this.subscriptions = [];\n\n    var output = model.output || function (x) {\n      return x;\n    };\n\n    this.emitChange = function () {\n      return _this.transmitter.publish(output(_this.state));\n    };\n\n    var handleDispatch = function handleDispatch(f, payload) {\n      try {\n        return f();\n      } catch (e) {\n        if (model.handlesOwnErrors) {\n          _this.lifecycle('error', {\n            error: e,\n            payload: payload,\n            state: _this.state\n          });\n          return false;\n        }\n\n        throw e;\n      }\n    };\n\n    fn.assign(this, model.publicMethods);\n\n    // Register dispatcher\n    this.dispatchToken = alt.dispatcher.register(function (payload) {\n      _this.preventDefault = false;\n\n      _this.lifecycle('beforeEach', {\n        payload: payload,\n        state: _this.state\n      });\n\n      var actionHandlers = model.actionListeners[payload.action];\n\n      if (actionHandlers || model.otherwise) {\n        var result = void 0;\n\n        if (actionHandlers) {\n          result = handleDispatch(function () {\n            return actionHandlers.filter(Boolean).every(function (handler) {\n              return handler.call(model, payload.data, payload.action) !== false;\n            });\n          }, payload);\n        } else {\n          result = handleDispatch(function () {\n            return model.otherwise(payload.data, payload.action);\n          }, payload);\n        }\n\n        if (result !== false && !_this.preventDefault) _this.emitChange();\n      }\n\n      if (model.reduce) {\n        handleDispatch(function () {\n          var value = model.reduce(_this.state, payload);\n          if (value !== undefined) _this.state = value;\n        }, payload);\n        if (!_this.preventDefault) _this.emitChange();\n      }\n\n      _this.lifecycle('afterEach', {\n        payload: payload,\n        state: _this.state\n      });\n    });\n\n    this.lifecycle('init');\n  }\n\n  AltStore.prototype.listen = function () {\n    function listen(cb) {\n      var _this2 = this;\n\n      if (!fn.isFunction(cb)) throw new TypeError('listen expects a function');\n\n      var _transmitter$subscrib = this.transmitter.subscribe(cb);\n\n      var dispose = _transmitter$subscrib.dispose;\n\n      this.subscriptions.push({ cb: cb, dispose: dispose });\n      return function () {\n        _this2.lifecycle('unlisten');\n        dispose();\n      };\n    }\n\n    return listen;\n  }();\n\n  AltStore.prototype.unlisten = function () {\n    function unlisten(cb) {\n      this.lifecycle('unlisten');\n      this.subscriptions.filter(function (subscription) {\n        return subscription.cb === cb;\n      }).forEach(function (subscription) {\n        return subscription.dispose();\n      });\n    }\n\n    return unlisten;\n  }();\n\n  AltStore.prototype.getState = function () {\n    function getState() {\n      return this.StoreModel.config.getState.call(this, this.state);\n    }\n\n    return getState;\n  }();\n\n  return AltStore;\n}();\n\nexports['default'] = AltStore;\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _transmitter = require('transmitter');\n\nvar _transmitter2 = _interopRequireDefault(_transmitter);\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar StoreMixin = {\n  waitFor: function () {\n    function waitFor() {\n      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n\n      if (!sources.length) {\n        throw new ReferenceError('Dispatch tokens not provided');\n      }\n\n      var sourcesArray = sources;\n      if (sources.length === 1) {\n        sourcesArray = Array.isArray(sources[0]) ? sources[0] : sources;\n      }\n\n      var tokens = sourcesArray.map(function (source) {\n        return source.dispatchToken || source;\n      });\n\n      this.dispatcher.waitFor(tokens);\n    }\n\n    return waitFor;\n  }(),\n  exportAsync: function () {\n    function exportAsync(asyncMethods) {\n      this.registerAsync(asyncMethods);\n    }\n\n    return exportAsync;\n  }(),\n  registerAsync: function () {\n    function registerAsync(asyncDef) {\n      var _this = this;\n\n      var loadCounter = 0;\n\n      var asyncMethods = fn.isFunction(asyncDef) ? asyncDef(this.alt) : asyncDef;\n\n      var toExport = Object.keys(asyncMethods).reduce(function (publicMethods, methodName) {\n        var desc = asyncMethods[methodName];\n        var spec = fn.isFunction(desc) ? desc(_this) : desc;\n\n        var validHandlers = ['success', 'error', 'loading'];\n        validHandlers.forEach(function (handler) {\n          if (spec[handler] && !spec[handler].id) {\n            throw new Error(String(handler) + ' handler must be an action function');\n          }\n        });\n\n        publicMethods[methodName] = function () {\n          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          var state = _this.getInstance().getState();\n          var value = spec.local && spec.local.apply(spec, [state].concat(args));\n          var shouldFetch = spec.shouldFetch ? spec.shouldFetch.apply(spec, [state].concat(args))\n          /*eslint-disable*/\n          : value == null;\n          /*eslint-enable*/\n          var intercept = spec.interceptResponse || function (x) {\n            return x;\n          };\n\n          var makeActionHandler = function () {\n            function makeActionHandler(action, isError) {\n              return function (x) {\n                var fire = function () {\n                  function fire() {\n                    loadCounter -= 1;\n                    action(intercept(x, action, args));\n                    if (isError) throw x;\n                    return x;\n                  }\n\n                  return fire;\n                }();\n                return _this.alt.trapAsync ? function () {\n                  return fire();\n                } : fire();\n              };\n            }\n\n            return makeActionHandler;\n          }();\n\n          // if we don't have it in cache then fetch it\n          if (shouldFetch) {\n            loadCounter += 1;\n            /* istanbul ignore else */\n            if (spec.loading) spec.loading(intercept(null, spec.loading, args));\n            return spec.remote.apply(spec, [state].concat(args)).then(makeActionHandler(spec.success), makeActionHandler(spec.error, 1));\n          }\n\n          // otherwise emit the change now\n          _this.emitChange();\n          return value;\n        };\n\n        return publicMethods;\n      }, {});\n\n      this.exportPublicMethods(toExport);\n      this.exportPublicMethods({\n        isLoading: function () {\n          function isLoading() {\n            return loadCounter > 0;\n          }\n\n          return isLoading;\n        }()\n      });\n    }\n\n    return registerAsync;\n  }(),\n  exportPublicMethods: function () {\n    function exportPublicMethods(methods) {\n      var _this2 = this;\n\n      fn.eachObject(function (methodName, value) {\n        if (!fn.isFunction(value)) {\n          throw new TypeError('exportPublicMethods expects a function');\n        }\n\n        _this2.publicMethods[methodName] = value;\n      }, [methods]);\n    }\n\n    return exportPublicMethods;\n  }(),\n  emitChange: function () {\n    function emitChange() {\n      this.getInstance().emitChange();\n    }\n\n    return emitChange;\n  }(),\n  on: function () {\n    function on(lifecycleEvent, handler) {\n      if (lifecycleEvent === 'error') this.handlesOwnErrors = true;\n      var bus = this.lifecycleEvents[lifecycleEvent] || (0, _transmitter2['default'])();\n      this.lifecycleEvents[lifecycleEvent] = bus;\n      return bus.subscribe(handler.bind(this));\n    }\n\n    return on;\n  }(),\n  bindAction: function () {\n    function bindAction(symbol, handler) {\n      if (!symbol) {\n        throw new ReferenceError('Invalid action reference passed in');\n      }\n      if (!fn.isFunction(handler)) {\n        throw new TypeError('bindAction expects a function');\n      }\n\n      // You can pass in the constant or the function itself\n      var key = symbol.id ? symbol.id : symbol;\n      this.actionListeners[key] = this.actionListeners[key] || [];\n      this.actionListeners[key].push(handler.bind(this));\n      this.boundListeners.push(key);\n    }\n\n    return bindAction;\n  }(),\n  bindActions: function () {\n    function bindActions(actions) {\n      var _this3 = this;\n\n      fn.eachObject(function (action, symbol) {\n        var matchFirstCharacter = /./;\n        var assumedEventHandler = action.replace(matchFirstCharacter, function (x) {\n          return 'on' + String(x[0].toUpperCase());\n        });\n\n        if (_this3[action] && _this3[assumedEventHandler]) {\n          // If you have both action and onAction\n          throw new ReferenceError('You have multiple action handlers bound to an action: ' + (String(action) + ' and ' + String(assumedEventHandler)));\n        }\n\n        var handler = _this3[action] || _this3[assumedEventHandler];\n        if (handler) {\n          _this3.bindAction(symbol, handler);\n        }\n      }, [actions]);\n    }\n\n    return bindActions;\n  }(),\n  bindListeners: function () {\n    function bindListeners(obj) {\n      var _this4 = this;\n\n      fn.eachObject(function (methodName, symbol) {\n        var listener = _this4[methodName];\n\n        if (!listener) {\n          throw new ReferenceError(String(methodName) + ' defined but does not exist in ' + String(_this4.displayName));\n        }\n\n        if (Array.isArray(symbol)) {\n          symbol.forEach(function (action) {\n            _this4.bindAction(action, listener);\n          });\n        } else {\n          _this4.bindAction(symbol, listener);\n        }\n      }, [obj]);\n    }\n\n    return bindListeners;\n  }()\n};\n\nexports['default'] = StoreMixin;\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStoreConfig = createStoreConfig;\nexports.transformStore = transformStore;\nexports.createStoreFromObject = createStoreFromObject;\nexports.createStoreFromClass = createStoreFromClass;\n\nvar _AltUtils = require('../utils/AltUtils');\n\nvar utils = _interopRequireWildcard(_AltUtils);\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nvar _AltStore = require('./AltStore');\n\nvar _AltStore2 = _interopRequireDefault(_AltStore);\n\nvar _StoreMixin = require('./StoreMixin');\n\nvar _StoreMixin2 = _interopRequireDefault(_StoreMixin);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction doSetState(store, storeInstance, state) {\n  if (!state) {\n    return;\n  }\n\n  var config = storeInstance.StoreModel.config;\n\n\n  var nextState = fn.isFunction(state) ? state(storeInstance.state) : state;\n\n  storeInstance.state = config.setState.call(store, storeInstance.state, nextState);\n\n  if (!store.alt.dispatcher.isDispatching()) {\n    store.emitChange();\n  }\n}\n\nfunction createPrototype(proto, alt, key, extras) {\n  return fn.assign(proto, _StoreMixin2['default'], {\n    displayName: key,\n    alt: alt,\n    dispatcher: alt.dispatcher,\n    preventDefault: function () {\n      function preventDefault() {\n        this.getInstance().preventDefault = true;\n      }\n\n      return preventDefault;\n    }(),\n\n    boundListeners: [],\n    lifecycleEvents: {},\n    actionListeners: {},\n    publicMethods: {},\n    handlesOwnErrors: false\n  }, extras);\n}\n\nfunction createStoreConfig(globalConfig, StoreModel) {\n  StoreModel.config = fn.assign({\n    getState: function () {\n      function getState(state) {\n        if (Array.isArray(state)) {\n          return state.slice();\n        } else if (fn.isMutableObject(state)) {\n          return fn.assign({}, state);\n        }\n\n        return state;\n      }\n\n      return getState;\n    }(),\n    setState: function () {\n      function setState(currentState, nextState) {\n        if (fn.isMutableObject(nextState)) {\n          return fn.assign(currentState, nextState);\n        }\n        return nextState;\n      }\n\n      return setState;\n    }()\n  }, globalConfig, StoreModel.config);\n}\n\nfunction transformStore(transforms, StoreModel) {\n  return transforms.reduce(function (Store, transform) {\n    return transform(Store);\n  }, StoreModel);\n}\n\nfunction createStoreFromObject(alt, StoreModel, key) {\n  var storeInstance = void 0;\n\n  var StoreProto = createPrototype({}, alt, key, fn.assign({\n    getInstance: function () {\n      function getInstance() {\n        return storeInstance;\n      }\n\n      return getInstance;\n    }(),\n    setState: function () {\n      function setState(nextState) {\n        doSetState(this, storeInstance, nextState);\n      }\n\n      return setState;\n    }()\n  }, StoreModel));\n\n  // bind the store listeners\n  /* istanbul ignore else */\n  if (StoreProto.bindListeners) {\n    _StoreMixin2['default'].bindListeners.call(StoreProto, StoreProto.bindListeners);\n  }\n  /* istanbul ignore else */\n  if (StoreProto.observe) {\n    _StoreMixin2['default'].bindListeners.call(StoreProto, StoreProto.observe(alt));\n  }\n\n  // bind the lifecycle events\n  /* istanbul ignore else */\n  if (StoreProto.lifecycle) {\n    fn.eachObject(function (eventName, event) {\n      _StoreMixin2['default'].on.call(StoreProto, eventName, event);\n    }, [StoreProto.lifecycle]);\n  }\n\n  // create the instance and fn.assign the public methods to the instance\n  storeInstance = fn.assign(new _AltStore2['default'](alt, StoreProto, StoreProto.state !== undefined ? StoreProto.state : {}, StoreModel), StoreProto.publicMethods, {\n    displayName: key,\n    config: StoreModel.config\n  });\n\n  return storeInstance;\n}\n\nfunction createStoreFromClass(alt, StoreModel, key) {\n  var storeInstance = void 0;\n  var config = StoreModel.config;\n\n  // Creating a class here so we don't overload the provided store's\n  // prototype with the mixin behaviour and I'm extending from StoreModel\n  // so we can inherit any extensions from the provided store.\n\n  var Store = function (_StoreModel) {\n    _inherits(Store, _StoreModel);\n\n    function Store() {\n      _classCallCheck(this, Store);\n\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return _possibleConstructorReturn(this, _StoreModel.call.apply(_StoreModel, [this].concat(args)));\n    }\n\n    return Store;\n  }(StoreModel);\n\n  createPrototype(Store.prototype, alt, key, {\n    type: 'AltStore',\n    getInstance: function () {\n      function getInstance() {\n        return storeInstance;\n      }\n\n      return getInstance;\n    }(),\n    setState: function () {\n      function setState(nextState) {\n        doSetState(this, storeInstance, nextState);\n      }\n\n      return setState;\n    }()\n  });\n\n  for (var _len = arguments.length, argsForClass = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    argsForClass[_key - 3] = arguments[_key];\n  }\n\n  var store = new (Function.prototype.bind.apply(Store, [null].concat(argsForClass)))();\n\n  /* istanbul ignore next */\n  if (config.bindListeners) store.bindListeners(config.bindListeners);\n  /* istanbul ignore next */\n  if (config.datasource) store.registerAsync(config.datasource);\n\n  storeInstance = fn.assign(new _AltStore2['default'](alt, store, store.state !== undefined ? store.state : store, StoreModel), utils.getInternalMethods(StoreModel), config.publicMethods, { displayName: key });\n\n  return storeInstance;\n}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.getInternalMethods = getInternalMethods;\nexports.getPrototypeChain = getPrototypeChain;\nexports.warn = warn;\nexports.uid = uid;\nexports.formatAsConstant = formatAsConstant;\nexports.dispatchIdentity = dispatchIdentity;\nexports.fsa = fsa;\nexports.dispatch = dispatch;\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\n/*eslint-disable*/\nvar builtIns = Object.getOwnPropertyNames(NoopClass);\nvar builtInProto = Object.getOwnPropertyNames(NoopClass.prototype);\n/*eslint-enable*/\n\nfunction getInternalMethods(Obj, isProto) {\n  var excluded = isProto ? builtInProto : builtIns;\n  var obj = isProto ? Obj.prototype : Obj;\n  return Object.getOwnPropertyNames(obj).reduce(function (value, m) {\n    if (excluded.indexOf(m) !== -1) {\n      return value;\n    }\n\n    value[m] = obj[m];\n    return value;\n  }, {});\n}\n\nfunction getPrototypeChain(Obj) {\n  var methods = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  return Obj === Function.prototype ? methods : getPrototypeChain(Object.getPrototypeOf(Obj), fn.assign(getInternalMethods(Obj, true), methods));\n}\n\nfunction warn(msg) {\n  /* istanbul ignore else */\n  /*eslint-disable*/\n  if (typeof console !== 'undefined') {\n    console.warn(new ReferenceError(msg));\n  }\n  /*eslint-enable*/\n}\n\nfunction uid(container, name) {\n  var count = 0;\n  var key = name;\n  while (Object.hasOwnProperty.call(container, key)) {\n    key = name + String(++count);\n  }\n  return key;\n}\n\nfunction formatAsConstant(name) {\n  return name.replace(/[a-z]([A-Z])/g, function (i) {\n    return String(i[0]) + '_' + String(i[1].toLowerCase());\n  }).toUpperCase();\n}\n\nfunction dispatchIdentity(x) {\n  if (x === undefined) return null;\n\n  for (var _len = arguments.length, a = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    a[_key - 1] = arguments[_key];\n  }\n\n  return a.length ? [x].concat(a) : x;\n}\n\nfunction fsa(id, type, payload, details) {\n  return {\n    type: type,\n    payload: payload,\n    meta: _extends({\n      dispatchId: id\n    }, details),\n\n    id: id,\n    action: type,\n    data: payload,\n    details: details\n  };\n}\n\nfunction dispatch(id, actionObj, payload, alt) {\n  var data = actionObj.dispatch(payload);\n  if (data === undefined) return null;\n\n  var type = actionObj.id;\n  var namespace = type;\n  var name = type;\n  var details = { id: type, namespace: namespace, name: name };\n\n  var dispatchLater = function dispatchLater(x) {\n    return alt.dispatch(type, x, details);\n  };\n\n  if (fn.isFunction(data)) return data(dispatchLater, alt);\n\n  // XXX standardize this\n  return alt.dispatcher.dispatch(fsa(id, type, data, details));\n}\n\n/* istanbul ignore next */\nfunction NoopClass() {}","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setAppState = setAppState;\nexports.snapshot = snapshot;\nexports.saveInitialSnapshot = saveInitialSnapshot;\nexports.filterSnapshots = filterSnapshots;\n\nvar _functions = require('../functions');\n\nvar fn = _interopRequireWildcard(_functions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }\n\nfunction setAppState(instance, data, onStore) {\n  var obj = instance.deserialize(data);\n  fn.eachObject(function (key, value) {\n    var store = instance.stores[key];\n    if (store) {\n      (function () {\n        var config = store.StoreModel.config;\n\n        var state = store.state;\n        if (config.onDeserialize) obj[key] = config.onDeserialize(value) || value;\n        if (fn.isMutableObject(state)) {\n          fn.eachObject(function (k) {\n            return delete state[k];\n          }, [state]);\n          fn.assign(state, obj[key]);\n        } else {\n          store.state = obj[key];\n        }\n        onStore(store, store.state);\n      })();\n    }\n  }, [obj]);\n}\n\nfunction snapshot(instance) {\n  var storeNames = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\n  var stores = storeNames.length ? storeNames : Object.keys(instance.stores);\n  return stores.reduce(function (obj, storeHandle) {\n    var storeName = storeHandle.displayName || storeHandle;\n    var store = instance.stores[storeName];\n    var config = store.StoreModel.config;\n\n    store.lifecycle('snapshot');\n    var customSnapshot = config.onSerialize && config.onSerialize(store.state);\n    obj[storeName] = customSnapshot ? customSnapshot : store.getState();\n    return obj;\n  }, {});\n}\n\nfunction saveInitialSnapshot(instance, key) {\n  var state = instance.deserialize(instance.serialize(instance.stores[key].state));\n  instance._initSnapshot[key] = state;\n  instance._lastSnapshot[key] = state;\n}\n\nfunction filterSnapshots(instance, state, stores) {\n  return stores.reduce(function (obj, store) {\n    var storeName = store.displayName || store;\n    if (!state[storeName]) {\n      throw new ReferenceError(String(storeName) + ' is not a valid store');\n    }\n    obj[storeName] = state[storeName];\n    return obj;\n  }, {});\n}","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  (function () {\n    var printWarning = function printWarning(format) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var argIndex = 0;\n      var message = 'Warning: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // --- Welcome to debugging React ---\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch (x) {}\n    };\n\n    warning = function warning(condition, format) {\n      if (format === undefined) {\n        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n      }\n\n      if (format.indexOf('Failed Composite propType: ') === 0) {\n        return; // Ignore CompositeComponent proptype check.\n      }\n\n      if (!condition) {\n        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n          args[_key2 - 2] = arguments[_key2];\n        }\n\n        printWarning.apply(undefined, [format].concat(args));\n      }\n    };\n  })();\n}\n\nmodule.exports = warning;","/**\n * Copyright (c) 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nmodule.exports.Dispatcher = require('./lib/Dispatcher');\n","/**\n * Copyright (c) 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule Dispatcher\n * \n * @preventMunge\n */\n\n'use strict';\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar _prefix = 'ID_';\n\n/**\n * Dispatcher is used to broadcast payloads to registered callbacks. This is\n * different from generic pub-sub systems in two ways:\n *\n *   1) Callbacks are not subscribed to particular events. Every payload is\n *      dispatched to every registered callback.\n *   2) Callbacks can be deferred in whole or part until other callbacks have\n *      been executed.\n *\n * For example, consider this hypothetical flight destination form, which\n * selects a default city when a country is selected:\n *\n *   var flightDispatcher = new Dispatcher();\n *\n *   // Keeps track of which country is selected\n *   var CountryStore = {country: null};\n *\n *   // Keeps track of which city is selected\n *   var CityStore = {city: null};\n *\n *   // Keeps track of the base flight price of the selected city\n *   var FlightPriceStore = {price: null}\n *\n * When a user changes the selected city, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'city-update',\n *     selectedCity: 'paris'\n *   });\n *\n * This payload is digested by `CityStore`:\n *\n *   flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'city-update') {\n *       CityStore.city = payload.selectedCity;\n *     }\n *   });\n *\n * When the user selects a country, we dispatch the payload:\n *\n *   flightDispatcher.dispatch({\n *     actionType: 'country-update',\n *     selectedCountry: 'australia'\n *   });\n *\n * This payload is digested by both stores:\n *\n *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       CountryStore.country = payload.selectedCountry;\n *     }\n *   });\n *\n * When the callback to update `CountryStore` is registered, we save a reference\n * to the returned token. Using this token with `waitFor()`, we can guarantee\n * that `CountryStore` is updated before the callback that updates `CityStore`\n * needs to query its data.\n *\n *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {\n *     if (payload.actionType === 'country-update') {\n *       // `CountryStore.country` may not be updated.\n *       flightDispatcher.waitFor([CountryStore.dispatchToken]);\n *       // `CountryStore.country` is now guaranteed to be updated.\n *\n *       // Select the default city for the new country\n *       CityStore.city = getDefaultCityForCountry(CountryStore.country);\n *     }\n *   });\n *\n * The usage of `waitFor()` can be chained, for example:\n *\n *   FlightPriceStore.dispatchToken =\n *     flightDispatcher.register(function(payload) {\n *       switch (payload.actionType) {\n *         case 'country-update':\n *         case 'city-update':\n *           flightDispatcher.waitFor([CityStore.dispatchToken]);\n *           FlightPriceStore.price =\n *             getFlightPriceStore(CountryStore.country, CityStore.city);\n *           break;\n *     }\n *   });\n *\n * The `country-update` payload will be guaranteed to invoke the stores'\n * registered callbacks in order: `CountryStore`, `CityStore`, then\n * `FlightPriceStore`.\n */\n\nvar Dispatcher = (function () {\n  function Dispatcher() {\n    _classCallCheck(this, Dispatcher);\n\n    this._callbacks = {};\n    this._isDispatching = false;\n    this._isHandled = {};\n    this._isPending = {};\n    this._lastID = 1;\n  }\n\n  /**\n   * Registers a callback to be invoked with every dispatched payload. Returns\n   * a token that can be used with `waitFor()`.\n   */\n\n  Dispatcher.prototype.register = function register(callback) {\n    var id = _prefix + this._lastID++;\n    this._callbacks[id] = callback;\n    return id;\n  };\n\n  /**\n   * Removes a callback based on its token.\n   */\n\n  Dispatcher.prototype.unregister = function unregister(id) {\n    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\n    delete this._callbacks[id];\n  };\n\n  /**\n   * Waits for the callbacks specified to be invoked before continuing execution\n   * of the current callback. This method should only be used by a callback in\n   * response to a dispatched payload.\n   */\n\n  Dispatcher.prototype.waitFor = function waitFor(ids) {\n    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;\n    for (var ii = 0; ii < ids.length; ii++) {\n      var id = ids[ii];\n      if (this._isPending[id]) {\n        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;\n        continue;\n      }\n      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;\n      this._invokeCallback(id);\n    }\n  };\n\n  /**\n   * Dispatches a payload to all registered callbacks.\n   */\n\n  Dispatcher.prototype.dispatch = function dispatch(payload) {\n    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;\n    this._startDispatching(payload);\n    try {\n      for (var id in this._callbacks) {\n        if (this._isPending[id]) {\n          continue;\n        }\n        this._invokeCallback(id);\n      }\n    } finally {\n      this._stopDispatching();\n    }\n  };\n\n  /**\n   * Is this Dispatcher currently dispatching.\n   */\n\n  Dispatcher.prototype.isDispatching = function isDispatching() {\n    return this._isDispatching;\n  };\n\n  /**\n   * Call the callback stored with the given id. Also do some internal\n   * bookkeeping.\n   *\n   * @internal\n   */\n\n  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {\n    this._isPending[id] = true;\n    this._callbacks[id](this._pendingPayload);\n    this._isHandled[id] = true;\n  };\n\n  /**\n   * Set up bookkeeping needed when dispatching.\n   *\n   * @internal\n   */\n\n  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {\n    for (var id in this._callbacks) {\n      this._isPending[id] = false;\n      this._isHandled[id] = false;\n    }\n    this._pendingPayload = payload;\n    this._isDispatching = true;\n  };\n\n  /**\n   * Clear bookkeeping used for dispatching.\n   *\n   * @internal\n   */\n\n  Dispatcher.prototype._stopDispatching = function _stopDispatching() {\n    delete this._pendingPayload;\n    this._isDispatching = false;\n  };\n\n  return Dispatcher;\n})();\n\nmodule.exports = Dispatcher;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule invariant\n */\n\n\"use strict\";\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function (condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;","/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== 'production') {\n  var invariant = require('fbjs/lib/invariant');\n  var warning = require('fbjs/lib/warning');\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\n","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    invariant(\n      false,\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\nvar checkPropTypes = require('./checkPropTypes');\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (process.env.NODE_ENV !== 'production') {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          invariant(\n            false,\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            warning(\n              false,\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `%s` prop on `%s`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',\n              propFullName,\n              componentName\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunction.thatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues);\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (propValue.hasOwnProperty(key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunction.thatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        warning(\n          false,\n          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +\n          'received %s at index %s.',\n          getPostfixForTypeWarning(checker),\n          i\n        );\n        return emptyFunction.thatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createBrowserHistory = require('history/createBrowserHistory');\n\nvar _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);\n\nvar _reactRouter = require('react-router');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\nvar BrowserRouter = function (_React$Component) {\n  _inherits(BrowserRouter, _React$Component);\n\n  function BrowserRouter() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, BrowserRouter);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createBrowserHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  BrowserRouter.prototype.render = function render() {\n    return _react2.default.createElement(_reactRouter.Router, { history: this.history, children: this.props.children });\n  };\n\n  return BrowserRouter;\n}(_react2.default.Component);\n\nBrowserRouter.propTypes = {\n  basename: _propTypes2.default.string,\n  forceRefresh: _propTypes2.default.bool,\n  getUserConfirmation: _propTypes2.default.func,\n  keyLength: _propTypes2.default.number,\n  children: _propTypes2.default.node\n};\nexports.default = BrowserRouter;","'use strict';\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createHashHistory = require('history/createHashHistory');\n\nvar _createHashHistory2 = _interopRequireDefault(_createHashHistory);\n\nvar _reactRouter = require('react-router');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\nvar HashRouter = function (_React$Component) {\n  _inherits(HashRouter, _React$Component);\n\n  function HashRouter() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, HashRouter);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createHashHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  HashRouter.prototype.render = function render() {\n    return _react2.default.createElement(_reactRouter.Router, { history: this.history, children: this.props.children });\n  };\n\n  return HashRouter;\n}(_react2.default.Component);\n\nHashRouter.propTypes = {\n  basename: _propTypes2.default.string,\n  getUserConfirmation: _propTypes2.default.func,\n  hashType: _propTypes2.default.oneOf(['hashbang', 'noslash', 'slash']),\n  children: _propTypes2.default.node\n};\nexports.default = HashRouter;","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar isModifiedEvent = function isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n};\n\n/**\n * The public API for rendering a history-aware <a>.\n */\n\nvar Link = function (_React$Component) {\n  _inherits(Link, _React$Component);\n\n  function Link() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Link);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {\n      if (_this.props.onClick) _this.props.onClick(event);\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && // ignore right clicks\n      !_this.props.target && // let browser handle \"target=_blank\" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n\n          var history = _this.context.router.history;\n          var _this$props = _this.props,\n              replace = _this$props.replace,\n              to = _this$props.to;\n\n\n          if (replace) {\n            history.replace(to);\n          } else {\n            history.push(to);\n          }\n        }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Link.prototype.render = function render() {\n    var _props = this.props,\n        replace = _props.replace,\n        to = _props.to,\n        props = _objectWithoutProperties(_props, ['replace', 'to']); // eslint-disable-line no-unused-vars\n\n    var href = this.context.router.history.createHref(typeof to === 'string' ? { pathname: to } : to);\n\n    return _react2.default.createElement('a', _extends({}, props, { onClick: this.handleClick, href: href }));\n  };\n\n  return Link;\n}(_react2.default.Component);\n\nLink.propTypes = {\n  onClick: _propTypes2.default.func,\n  target: _propTypes2.default.string,\n  replace: _propTypes2.default.bool,\n  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired\n};\nLink.defaultProps = {\n  replace: false\n};\nLink.contextTypes = {\n  router: _propTypes2.default.shape({\n    history: _propTypes2.default.shape({\n      push: _propTypes2.default.func.isRequired,\n      replace: _propTypes2.default.func.isRequired,\n      createHref: _propTypes2.default.func.isRequired\n    }).isRequired\n  }).isRequired\n};\nexports.default = Link;","'use strict';\n\nexports.__esModule = true;\n\nvar _reactRouter = require('react-router');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _reactRouter.MemoryRouter;\n  }\n});","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactRouter = require('react-router');\n\nvar _Link = require('./Link');\n\nvar _Link2 = _interopRequireDefault(_Link);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nvar NavLink = function NavLink(_ref) {\n  var to = _ref.to,\n      exact = _ref.exact,\n      strict = _ref.strict,\n      location = _ref.location,\n      activeClassName = _ref.activeClassName,\n      className = _ref.className,\n      activeStyle = _ref.activeStyle,\n      style = _ref.style,\n      getIsActive = _ref.isActive,\n      rest = _objectWithoutProperties(_ref, ['to', 'exact', 'strict', 'location', 'activeClassName', 'className', 'activeStyle', 'style', 'isActive']);\n\n  return _react2.default.createElement(_reactRouter.Route, {\n    path: (typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' ? to.pathname : to,\n    exact: exact,\n    strict: strict,\n    location: location,\n    children: function children(_ref2) {\n      var location = _ref2.location,\n          match = _ref2.match;\n\n      var isActive = !!(getIsActive ? getIsActive(match, location) : match);\n\n      return _react2.default.createElement(_Link2.default, _extends({\n        to: to,\n        className: isActive ? [activeClassName, className].filter(function (i) {\n          return i;\n        }).join(' ') : className,\n        style: isActive ? _extends({}, style, activeStyle) : style\n      }, rest));\n    }\n  });\n};\n\nNavLink.propTypes = {\n  to: _Link2.default.propTypes.to,\n  exact: _propTypes2.default.bool,\n  strict: _propTypes2.default.bool,\n  location: _propTypes2.default.object,\n  activeClassName: _propTypes2.default.string,\n  className: _propTypes2.default.string,\n  activeStyle: _propTypes2.default.object,\n  style: _propTypes2.default.object,\n  isActive: _propTypes2.default.func\n};\n\nNavLink.defaultProps = {\n  activeClassName: 'active'\n};\n\nexports.default = NavLink;","'use strict';\n\nexports.__esModule = true;\n\nvar _reactRouter = require('react-router');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _reactRouter.Prompt;\n  }\n});","'use strict';\n\nexports.__esModule = true;\n\nvar _reactRouter = require('react-router');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _reactRouter.Redirect;\n  }\n});","'use strict';\n\nexports.__esModule = true;\n\nvar _reactRouter = require('react-router');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _reactRouter.Route;\n  }\n});","'use strict';\n\nexports.__esModule = true;\n\nvar _reactRouter = require('react-router');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _reactRouter.Router;\n  }\n});","'use strict';\n\nexports.__esModule = true;\n\nvar _reactRouter = require('react-router');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _reactRouter.StaticRouter;\n  }\n});","'use strict';\n\nexports.__esModule = true;\n\nvar _reactRouter = require('react-router');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _reactRouter.Switch;\n  }\n});","'use strict';\n\nexports.__esModule = true;\nexports.withRouter = exports.matchPath = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.NavLink = exports.MemoryRouter = exports.Link = exports.HashRouter = exports.BrowserRouter = undefined;\n\nvar _BrowserRouter2 = require('./BrowserRouter');\n\nvar _BrowserRouter3 = _interopRequireDefault(_BrowserRouter2);\n\nvar _HashRouter2 = require('./HashRouter');\n\nvar _HashRouter3 = _interopRequireDefault(_HashRouter2);\n\nvar _Link2 = require('./Link');\n\nvar _Link3 = _interopRequireDefault(_Link2);\n\nvar _MemoryRouter2 = require('./MemoryRouter');\n\nvar _MemoryRouter3 = _interopRequireDefault(_MemoryRouter2);\n\nvar _NavLink2 = require('./NavLink');\n\nvar _NavLink3 = _interopRequireDefault(_NavLink2);\n\nvar _Prompt2 = require('./Prompt');\n\nvar _Prompt3 = _interopRequireDefault(_Prompt2);\n\nvar _Redirect2 = require('./Redirect');\n\nvar _Redirect3 = _interopRequireDefault(_Redirect2);\n\nvar _Route2 = require('./Route');\n\nvar _Route3 = _interopRequireDefault(_Route2);\n\nvar _Router2 = require('./Router');\n\nvar _Router3 = _interopRequireDefault(_Router2);\n\nvar _StaticRouter2 = require('./StaticRouter');\n\nvar _StaticRouter3 = _interopRequireDefault(_StaticRouter2);\n\nvar _Switch2 = require('./Switch');\n\nvar _Switch3 = _interopRequireDefault(_Switch2);\n\nvar _matchPath2 = require('./matchPath');\n\nvar _matchPath3 = _interopRequireDefault(_matchPath2);\n\nvar _withRouter2 = require('./withRouter');\n\nvar _withRouter3 = _interopRequireDefault(_withRouter2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.BrowserRouter = _BrowserRouter3.default;\nexports.HashRouter = _HashRouter3.default;\nexports.Link = _Link3.default;\nexports.MemoryRouter = _MemoryRouter3.default;\nexports.NavLink = _NavLink3.default;\nexports.Prompt = _Prompt3.default;\nexports.Redirect = _Redirect3.default;\nexports.Route = _Route3.default;\nexports.Router = _Router3.default;\nexports.StaticRouter = _StaticRouter3.default;\nexports.Switch = _Switch3.default;\nexports.matchPath = _matchPath3.default;\nexports.withRouter = _withRouter3.default;","'use strict';\n\nexports.__esModule = true;\n\nvar _reactRouter = require('react-router');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _reactRouter.matchPath;\n  }\n});","'use strict';\n\nexports.__esModule = true;\nvar canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\nvar addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {\n  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);\n};\n\nvar removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {\n  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);\n};\n\nvar getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {\n  return callback(window.confirm(message));\n}; // eslint-disable-line no-alert\n\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586\n */\nvar supportsHistory = exports.supportsHistory = function supportsHistory() {\n  var ua = window.navigator.userAgent;\n\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;\n\n  return window.history && 'pushState' in window.history;\n};\n\n/**\n * Returns true if browser fires popstate on hash change.\n * IE10 and IE11 do not.\n */\nvar supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {\n  return window.navigator.userAgent.indexOf('Trident') === -1;\n};\n\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\nvar supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {\n  return window.navigator.userAgent.indexOf('Firefox') === -1;\n};\n\n/**\n * Returns true if a given popstate event is an extraneous WebKit event.\n * Accounts for the fact that Chrome on iOS fires real popstate events\n * containing undefined state when pressing the back button.\n */\nvar isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {\n  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;\n};","'use strict';\n\nexports.__esModule = true;\nexports.locationsAreEqual = exports.createLocation = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _resolvePathname = require('resolve-pathname');\n\nvar _resolvePathname2 = _interopRequireDefault(_resolvePathname);\n\nvar _valueEqual = require('value-equal');\n\nvar _valueEqual2 = _interopRequireDefault(_valueEqual);\n\nvar _PathUtils = require('./PathUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {\n  var location = void 0;\n  if (typeof path === 'string') {\n    // Two-arg form: push(path, state)\n    location = (0, _PathUtils.parsePath)(path);\n    location.state = state;\n  } else {\n    // One-arg form: push(location)\n    location = _extends({}, path);\n\n    if (location.pathname === undefined) location.pathname = '';\n\n    if (location.search) {\n      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;\n    } else {\n      location.search = '';\n    }\n\n    if (location.hash) {\n      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;\n    } else {\n      location.hash = '';\n    }\n\n    if (state !== undefined && location.state === undefined) location.state = state;\n  }\n\n  try {\n    location.pathname = decodeURI(location.pathname);\n  } catch (e) {\n    if (e instanceof URIError) {\n      throw new URIError('Pathname \"' + location.pathname + '\" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');\n    } else {\n      throw e;\n    }\n  }\n\n  if (key) location.key = key;\n\n  if (currentLocation) {\n    // Resolve incomplete/relative pathname relative to current location.\n    if (!location.pathname) {\n      location.pathname = currentLocation.pathname;\n    } else if (location.pathname.charAt(0) !== '/') {\n      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);\n    }\n  } else {\n    // When there is no prior location and pathname is empty, set it to /\n    if (!location.pathname) {\n      location.pathname = '/';\n    }\n  }\n\n  return location;\n};\n\nvar locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);\n};","'use strict';\n\nexports.__esModule = true;\nvar addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {\n  return path.charAt(0) === '/' ? path : '/' + path;\n};\n\nvar stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {\n  return path.charAt(0) === '/' ? path.substr(1) : path;\n};\n\nvar hasBasename = exports.hasBasename = function hasBasename(path, prefix) {\n  return new RegExp('^' + prefix + '(\\\\/|\\\\?|#|$)', 'i').test(path);\n};\n\nvar stripBasename = exports.stripBasename = function stripBasename(path, prefix) {\n  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;\n};\n\nvar stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {\n  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;\n};\n\nvar parsePath = exports.parsePath = function parsePath(path) {\n  var pathname = path || '/';\n  var search = '';\n  var hash = '';\n\n  var hashIndex = pathname.indexOf('#');\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex);\n    pathname = pathname.substr(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex);\n    pathname = pathname.substr(0, searchIndex);\n  }\n\n  return {\n    pathname: pathname,\n    search: search === '?' ? '' : search,\n    hash: hash === '#' ? '' : hash\n  };\n};\n\nvar createPath = exports.createPath = function createPath(location) {\n  var pathname = location.pathname,\n      search = location.search,\n      hash = location.hash;\n\n\n  var path = pathname || '/';\n\n  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;\n\n  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;\n\n  return path;\n};","'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _LocationUtils = require('./LocationUtils');\n\nvar _PathUtils = require('./PathUtils');\n\nvar _createTransitionManager = require('./createTransitionManager');\n\nvar _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);\n\nvar _DOMUtils = require('./DOMUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PopStateEvent = 'popstate';\nvar HashChangeEvent = 'hashchange';\n\nvar getHistoryState = function getHistoryState() {\n  try {\n    return window.history.state || {};\n  } catch (e) {\n    // IE 11 sometimes throws when accessing window.history.state\n    // See https://github.com/ReactTraining/history/pull/289\n    return {};\n  }\n};\n\n/**\n * Creates a history object that uses the HTML5 history API including\n * pushState, replaceState, and the popstate event.\n */\nvar createBrowserHistory = function createBrowserHistory() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Browser history needs a DOM');\n\n  var globalHistory = window.history;\n  var canUseHistory = (0, _DOMUtils.supportsHistory)();\n  var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();\n\n  var _props$forceRefresh = props.forceRefresh,\n      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,\n      _props$getUserConfirm = props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,\n      _props$keyLength = props.keyLength,\n      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;\n\n  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';\n\n  var getDOMLocation = function getDOMLocation(historyState) {\n    var _ref = historyState || {},\n        key = _ref.key,\n        state = _ref.state;\n\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n\n\n    var path = pathname + search + hash;\n\n    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path \"' + path + '\" to begin with \"' + basename + '\".');\n\n    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);\n\n    return (0, _LocationUtils.createLocation)(path, state, key);\n  };\n\n  var createKey = function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  };\n\n  var transitionManager = (0, _createTransitionManager2.default)();\n\n  var setState = function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n\n    transitionManager.notifyListeners(history.location, history.action);\n  };\n\n  var handlePopState = function handlePopState(event) {\n    // Ignore extraneous popstate events in WebKit.\n    if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;\n\n    handlePop(getDOMLocation(event.state));\n  };\n\n  var handleHashChange = function handleHashChange() {\n    handlePop(getDOMLocation(getHistoryState()));\n  };\n\n  var forceNextPop = false;\n\n  var handlePop = function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = 'POP';\n\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({ action: action, location: location });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  };\n\n  var revertPop = function revertPop(fromLocation) {\n    var toLocation = history.location;\n\n    // TODO: We could probably make this more reliable by\n    // keeping a list of keys we've seen in sessionStorage.\n    // Instead, we just default to 0 for keys we don't know.\n\n    var toIndex = allKeys.indexOf(toLocation.key);\n\n    if (toIndex === -1) toIndex = 0;\n\n    var fromIndex = allKeys.indexOf(fromLocation.key);\n\n    if (fromIndex === -1) fromIndex = 0;\n\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  };\n\n  var initialLocation = getDOMLocation(getHistoryState());\n  var allKeys = [initialLocation.key];\n\n  // Public interface\n\n  var createHref = function createHref(location) {\n    return basename + (0, _PathUtils.createPath)(location);\n  };\n\n  var push = function push(path, state) {\n    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');\n\n    var action = 'PUSH';\n    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);\n\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n\n      if (canUseHistory) {\n        globalHistory.pushState({ key: key, state: state }, null, href);\n\n        if (forceRefresh) {\n          window.location.href = href;\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);\n\n          nextKeys.push(location.key);\n          allKeys = nextKeys;\n\n          setState({ action: action, location: location });\n        }\n      } else {\n        (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');\n\n        window.location.href = href;\n      }\n    });\n  };\n\n  var replace = function replace(path, state) {\n    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');\n\n    var action = 'REPLACE';\n    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);\n\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n\n      if (canUseHistory) {\n        globalHistory.replaceState({ key: key, state: state }, null, href);\n\n        if (forceRefresh) {\n          window.location.replace(href);\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n\n          if (prevIndex !== -1) allKeys[prevIndex] = location.key;\n\n          setState({ action: action, location: location });\n        }\n      } else {\n        (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');\n\n        window.location.replace(href);\n      }\n    });\n  };\n\n  var go = function go(n) {\n    globalHistory.go(n);\n  };\n\n  var goBack = function goBack() {\n    return go(-1);\n  };\n\n  var goForward = function goForward() {\n    return go(1);\n  };\n\n  var listenerCount = 0;\n\n  var checkDOMListeners = function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1) {\n      (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);\n\n      if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);\n    } else if (listenerCount === 0) {\n      (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);\n\n      if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);\n    }\n  };\n\n  var isBlocked = false;\n\n  var block = function block() {\n    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  };\n\n  var listen = function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  };\n\n  var history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n\n  return history;\n};\n\nexports.default = createBrowserHistory;","'use strict';\n\nexports.__esModule = true;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _LocationUtils = require('./LocationUtils');\n\nvar _PathUtils = require('./PathUtils');\n\nvar _createTransitionManager = require('./createTransitionManager');\n\nvar _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);\n\nvar _DOMUtils = require('./DOMUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar HashChangeEvent = 'hashchange';\n\nvar HashPathCoders = {\n  hashbang: {\n    encodePath: function encodePath(path) {\n      return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);\n    },\n    decodePath: function decodePath(path) {\n      return path.charAt(0) === '!' ? path.substr(1) : path;\n    }\n  },\n  noslash: {\n    encodePath: _PathUtils.stripLeadingSlash,\n    decodePath: _PathUtils.addLeadingSlash\n  },\n  slash: {\n    encodePath: _PathUtils.addLeadingSlash,\n    decodePath: _PathUtils.addLeadingSlash\n  }\n};\n\nvar getHashPath = function getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var hashIndex = href.indexOf('#');\n  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);\n};\n\nvar pushHashPath = function pushHashPath(path) {\n  return window.location.hash = path;\n};\n\nvar replaceHashPath = function replaceHashPath(path) {\n  var hashIndex = window.location.href.indexOf('#');\n\n  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);\n};\n\nvar createHashHistory = function createHashHistory() {\n  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Hash history needs a DOM');\n\n  var globalHistory = window.history;\n  var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();\n\n  var _props$getUserConfirm = props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,\n      _props$hashType = props.hashType,\n      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;\n\n  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';\n\n  var _HashPathCoders$hashT = HashPathCoders[hashType],\n      encodePath = _HashPathCoders$hashT.encodePath,\n      decodePath = _HashPathCoders$hashT.decodePath;\n\n\n  var getDOMLocation = function getDOMLocation() {\n    var path = decodePath(getHashPath());\n\n    (0, _warning2.default)(!basename || (0, _PathUtils.hasBasename)(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path \"' + path + '\" to begin with \"' + basename + '\".');\n\n    if (basename) path = (0, _PathUtils.stripBasename)(path, basename);\n\n    return (0, _LocationUtils.createLocation)(path);\n  };\n\n  var transitionManager = (0, _createTransitionManager2.default)();\n\n  var setState = function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n\n    transitionManager.notifyListeners(history.location, history.action);\n  };\n\n  var forceNextPop = false;\n  var ignorePath = null;\n\n  var handleHashChange = function handleHashChange() {\n    var path = getHashPath();\n    var encodedPath = encodePath(path);\n\n    if (path !== encodedPath) {\n      // Ensure we always have a properly-encoded hash.\n      replaceHashPath(encodedPath);\n    } else {\n      var location = getDOMLocation();\n      var prevLocation = history.location;\n\n      if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.\n\n      if (ignorePath === (0, _PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.\n\n      ignorePath = null;\n\n      handlePop(location);\n    }\n  };\n\n  var handlePop = function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = 'POP';\n\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({ action: action, location: location });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  };\n\n  var revertPop = function revertPop(fromLocation) {\n    var toLocation = history.location;\n\n    // TODO: We could probably make this more reliable by\n    // keeping a list of paths we've seen in sessionStorage.\n    // Instead, we just default to 0 for paths we don't know.\n\n    var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));\n\n    if (toIndex === -1) toIndex = 0;\n\n    var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));\n\n    if (fromIndex === -1) fromIndex = 0;\n\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  };\n\n  // Ensure the hash is encoded properly before doing anything else.\n  var path = getHashPath();\n  var encodedPath = encodePath(path);\n\n  if (path !== encodedPath) replaceHashPath(encodedPath);\n\n  var initialLocation = getDOMLocation();\n  var allPaths = [(0, _PathUtils.createPath)(initialLocation)];\n\n  // Public interface\n\n  var createHref = function createHref(location) {\n    return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));\n  };\n\n  var push = function push(path, state) {\n    (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored');\n\n    var action = 'PUSH';\n    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);\n\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n\n      var path = (0, _PathUtils.createPath)(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a PUSH, so we'd\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        pushHashPath(encodedPath);\n\n        var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));\n        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);\n\n        nextPaths.push(path);\n        allPaths = nextPaths;\n\n        setState({ action: action, location: location });\n      } else {\n        (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');\n\n        setState();\n      }\n    });\n  };\n\n  var replace = function replace(path, state) {\n    (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored');\n\n    var action = 'REPLACE';\n    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);\n\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n\n      var path = (0, _PathUtils.createPath)(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a REPLACE, so we'd\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        replaceHashPath(encodedPath);\n      }\n\n      var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));\n\n      if (prevIndex !== -1) allPaths[prevIndex] = path;\n\n      setState({ action: action, location: location });\n    });\n  };\n\n  var go = function go(n) {\n    (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');\n\n    globalHistory.go(n);\n  };\n\n  var goBack = function goBack() {\n    return go(-1);\n  };\n\n  var goForward = function goForward() {\n    return go(1);\n  };\n\n  var listenerCount = 0;\n\n  var checkDOMListeners = function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1) {\n      (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);\n    } else if (listenerCount === 0) {\n      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);\n    }\n  };\n\n  var isBlocked = false;\n\n  var block = function block() {\n    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  };\n\n  var listen = function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  };\n\n  var history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n\n  return history;\n};\n\nexports.default = createHashHistory;","'use strict';\n\nexports.__esModule = true;\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar createTransitionManager = function createTransitionManager() {\n  var prompt = null;\n\n  var setPrompt = function setPrompt(nextPrompt) {\n    (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');\n\n    prompt = nextPrompt;\n\n    return function () {\n      if (prompt === nextPrompt) prompt = null;\n    };\n  };\n\n  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {\n    // TODO: If another transition starts while we're still confirming\n    // the previous one, we may end up in a weird state. Figure out the\n    // best way to handle this.\n    if (prompt != null) {\n      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;\n\n      if (typeof result === 'string') {\n        if (typeof getUserConfirmation === 'function') {\n          getUserConfirmation(result, callback);\n        } else {\n          (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');\n\n          callback(true);\n        }\n      } else {\n        // Return false from a transition hook to cancel the transition.\n        callback(result !== false);\n      }\n    } else {\n      callback(true);\n    }\n  };\n\n  var listeners = [];\n\n  var appendListener = function appendListener(fn) {\n    var isActive = true;\n\n    var listener = function listener() {\n      if (isActive) fn.apply(undefined, arguments);\n    };\n\n    listeners.push(listener);\n\n    return function () {\n      isActive = false;\n      listeners = listeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  };\n\n  var notifyListeners = function notifyListeners() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    listeners.forEach(function (listener) {\n      return listener.apply(undefined, args);\n    });\n  };\n\n  return {\n    setPrompt: setPrompt,\n    confirmTransitionTo: confirmTransitionTo,\n    appendListener: appendListener,\n    notifyListeners: notifyListeners\n  };\n};\n\nexports.default = createTransitionManager;","'use strict';\n\nexports.__esModule = true;\n\nvar _reactRouter = require('react-router');\n\nObject.defineProperty(exports, 'default', {\n  enumerable: true,\n  get: function get() {\n    return _reactRouter.withRouter;\n  }\n});","'use strict';\n\nvar isAbsolute = function isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n};\n\n// About 1.5x faster than the two-arg version of Array#splice()\nvar spliceOne = function spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }list.pop();\n};\n\n// This implementation is based heavily on node's url.parse\nvar resolvePathname = function resolvePathname(to) {\n  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  var toParts = to && to.split('/') || [];\n  var fromParts = from && from.split('/') || [];\n\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n\n  var hasTrailingSlash = void 0;\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) {\n    fromParts.unshift('..');\n  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');\n\n  var result = fromParts.join('/');\n\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n\n  return result;\n};\n\nmodule.exports = resolvePathname;","\"use strict\";\n\nfunction transmitter() {\n  var subscriptions = [];\n  var nowDispatching = false;\n  var toUnsubscribe = {};\n\n  var unsubscribe = function unsubscribe(onChange) {\n    var id = subscriptions.indexOf(onChange);\n    if (id < 0) return;\n    if (nowDispatching) {\n      toUnsubscribe[id] = onChange;\n      return;\n    }\n    subscriptions.splice(id, 1);\n  };\n\n  var subscribe = function subscribe(onChange) {\n    var id = subscriptions.push(onChange);\n    var dispose = function dispose() {\n      return unsubscribe(onChange);\n    };\n    return { dispose: dispose };\n  };\n\n  var publish = function publish() {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    nowDispatching = true;\n    try {\n      subscriptions.forEach(function (subscription, id) {\n        return toUnsubscribe[id] || subscription.apply(undefined, args);\n      });\n    } finally {\n      nowDispatching = false;\n      Object.keys(toUnsubscribe).forEach(function (id) {\n        return unsubscribe(toUnsubscribe[id]);\n      });\n      toUnsubscribe = {};\n    }\n  };\n\n  return {\n    publish: publish,\n    subscribe: subscribe,\n    $subscriptions: subscriptions\n  };\n}\n\nmodule.exports = transmitter;","'use strict';\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar valueEqual = function valueEqual(a, b) {\n  if (a === b) return true;\n\n  if (a == null || b == null) return false;\n\n  if (Array.isArray(a)) return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {\n    return valueEqual(item, b[index]);\n  });\n\n  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);\n  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);\n\n  if (aType !== bType) return false;\n\n  if (aType === 'object') {\n    var aValue = a.valueOf();\n    var bValue = b.valueOf();\n\n    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);\n\n    var aKeys = Object.keys(a);\n    var bKeys = Object.keys(b);\n\n    if (aKeys.length !== bKeys.length) return false;\n\n    return aKeys.every(function (key) {\n      return valueEqual(a[key], b[key]);\n    });\n  }\n\n  return false;\n};\n\nexports.default = valueEqual;","/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n","import alt from '../alt'\r\n\r\nclass BlockUserActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'handleContentChange',\r\n      'contentValidationFail',\r\n      'blockUserSuccess',\r\n      'blockUserFail'\r\n    )\r\n  }\r\n\r\n  getUserForBlock (data) {\r\n    let request = {\r\n      url: '/api/user/getByUsername/' + data.usernameForBlock,\r\n      method: 'get',\r\n      data: JSON.stringify(data),\r\n      contentType: 'application/json'\r\n    }\r\n\r\n    let cureentUserId = data.currentUserID\r\n\r\n    $.ajax(request)\r\n      .done((data) => {\r\n        if (data.length <= 0) {\r\n          return true\r\n        }\r\n\r\n        let userForBlockId = data[0]._id\r\n\r\n        let dataForRequest = {\r\n          userForBlockId: data[0]._id,\r\n          currentUserId: cureentUserId\r\n        }\r\n\r\n        let request = {\r\n          url: '/api/user/block/',\r\n          method: 'post',\r\n          data: JSON.stringify(dataForRequest),\r\n          contentType: 'application/json'\r\n        }\r\n\r\n        if (userForBlockId !== cureentUserId) {\r\n          $.ajax(request)\r\n            .done(() => this.blockUserSuccess())\r\n            .fail(err => this.blockUserFail(err))\r\n        } else {\r\n          this.blockUserFail()\r\n        }\r\n      })\r\n      .fail((err) => this.blockUserFail(err))\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default alt.createActions(BlockUserActions)\r\n","import alt from '../alt'\r\n\r\nclass FooterActions {\r\n  constructor () {\r\n    this.generateActions(\r\n    )\r\n  }\r\n}\r\n\r\nexport default alt.createActions(FooterActions)\r\n","import alt from '../alt'\r\n\r\nclass FormActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'handleUsernameChange',\r\n      'handlePasswordChange',\r\n      'handleConfirmedPasswordChange',\r\n      'handleFirstNameChange',\r\n      'handleLastNameChange',\r\n      'handleAgeChange',\r\n      'handleGenderChange',\r\n      'usernameValidationFail',\r\n      'passwordValidationFail',\r\n      'unauthorizedAccessAttempt'\r\n    )\r\n  }\r\n}\r\n\r\nexport default alt.createActions(FormActions)\r\n","import alt from '../alt'\r\n\r\nclass HomeActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'getUserPostsSuccess',\r\n      'getUserPostsFail',\r\n      'removePostsSuccess'\r\n    )\r\n  }\r\n}\r\n\r\nexport default alt.createActions(HomeActions)\r\n","import alt from '../alt'\r\n\r\nclass NavbarActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'updateAjaxAnimation'\r\n    )\r\n  }\r\n}\r\n\r\nexport default alt.createActions(NavbarActions)\r\n","import alt from '../alt'\r\n\r\nclass PostAddActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'handleContentChange',\r\n      'contentValidationFail',\r\n      'addPostSuccess',\r\n      'addPostFail',\r\n      'loadPostAddForm'\r\n    )\r\n  }\r\n\r\n  addPost (data) {\r\n    let request = {\r\n      url: '/api/post/add',\r\n      method: 'POST',\r\n      data: JSON.stringify(data),\r\n      contentType: 'application/json'\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(() => {\r\n        this.addPostSuccess()\r\n      })\r\n      .fail((err) => this.addPostFail(err))\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default alt.createActions(PostAddActions)\r\n","import alt from '../alt'\r\n\r\nclass PostEditActions {\r\n  constructor () {\r\n    this.generateActions(\r\n      'handleContentChange',\r\n      'contentValidationFail',\r\n      'editPostSuccess',\r\n      'editPostFail',\r\n      'getEditPostInfoFail',\r\n      'getEditPostInfoSuccess'\r\n    )\r\n  }\r\n\r\n  getEditPostInfo (postId) {\r\n    let request = {\r\n      url: `/api/post/edit/${postId}`,\r\n      method: 'GET',\r\n      contentType: 'application/json'\r\n    }\r\n    $.ajax(request)\r\n      .done((data) => {\r\n        this.getEditPostInfoSuccess(data)\r\n      })\r\n      .fail((err) => {\r\n        console.log(err)\r\n        this.getEditPostInfoFail(err)\r\n      })\r\n\r\n    return true\r\n  }\r\n\r\n  editPost (data) {\r\n    let request = {\r\n      url: `/api/post/edit/${data.postId}`,\r\n      method: 'POST',\r\n      data: JSON.stringify(data),\r\n      contentType: 'application/json'\r\n    }\r\n    $.ajax(request)\r\n      .done((data) => {\r\n        this.editPostSuccess(data)\r\n      })\r\n      .fail((err) => {\r\n        console.log(err)\r\n        this.editPostFail(err)\r\n      })\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default alt.createActions(PostEditActions)\r\n","import alt from '../alt'\n\nimport HomeActions from './HomeActions'\n\nclass UserActions {\n  constructor () {\n    this.generateActions(\n      'registerUserSuccess',\n      'registerUserFail',\n      'loginUserSuccess',\n      'loginUserFail',\n      'logoutUserSuccess',\n      'getUserOwnPostsSuccess',\n      'getUserOwnPostsFail',\n      'getProfileInfoSuccess',\n      'logoutUserSuccess'\n    )\n  }\n\n  registerUser (data) {\n    let request = {\n      url: '/user/register',\n      method: 'POST',\n      data: JSON.stringify(data),\n      contentType: 'application/json'\n    }\n\n    $.ajax(request)\n      .done((data) => {\n        this.registerUserSuccess(data)\n      })\n      .fail(err => {\n        console.log('Error', err)\n        this.registerUserFail(err.responseJSON.message)\n      })\n\n    return true\n  }\n\n  loginUser (data) {\n    let request = {\n      url: '/user/login',\n      method: 'post',\n      data: JSON.stringify(data),\n      contentType: 'application/json'\n    }\n\n    $.ajax(request)\n      .done(data => {\n        this.loginUserSuccess(data)\n      })\n      .fail(err => this.loginUserFail(err.responseJSON))\n\n    return true\n  }\n\n  logoutUser () {\n    let request = {\n      url: '/user/logout',\n      method: 'post'\n    }\n\n    $.ajax(request)\n      .done(() => {\n        this.logoutUserSuccess()\n        HomeActions.removePostsSuccess()\n      })\n\n    return true\n  }\n}\n\nexport default alt.createActions(UserActions)\n","import Alt from 'alt'\r\n\r\nexport default new Alt()\r\n","import React from 'react'\r\nimport Routes from '../routes'\r\nimport Navbar from './Navbar'\r\nimport Footer from './Footer'\r\nimport UserStore from '../stores/UserStore'\r\nimport UserActions from '../actions/UserActions'\r\n\r\nexport default class App extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = UserStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    UserStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    UserStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n        <Routes />\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","class Auth {\r\n  static saveUser (user) {\r\n    window.localStorage.setItem('user', JSON.stringify(user))\r\n  }\r\n\r\n  static getUser () {\r\n    const userJson = window.localStorage.getItem('user')\r\n    if (userJson) {\r\n      return JSON.parse(userJson)\r\n    }\r\n    return {}\r\n  }\r\n\r\n  static removeUser () {\r\n    window.localStorage.removeItem('user')\r\n  }\r\n\r\n  static authenticateUser (token) {\r\n    window.localStorage.setItem('token', token)\r\n  }\r\n  static isUserAuthenticated () {\r\n    return window.localStorage.getItem('token') !== null\r\n  }\r\n  static deauthenticateUser () {\r\n    window.localStorage.removeItem('token')\r\n  }\r\n  static getToken () {\r\n    return window.localStorage.getItem('token')\r\n  }\r\n}\r\n\r\nexport default Auth\r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport UserStore from '../stores/UserStore'\r\nimport BlockUserStore from '../stores/BlockUserStore'\r\nimport BlockUserAction from '../actions/BlockUserActions'\r\nimport Form from './form/Form'\r\nimport TextGroup from './form/TextGroup'\r\nimport Submit from './form/Submit'\r\n\r\nexport default class BlockUser extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = BlockUserStore.getState()\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    BlockUserStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    BlockUserStore.unlisten(this.onChange)\r\n  }\r\n\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n\r\n    let content = this.state.content\r\n    if (content === '') {\r\n      BlockUserAction.contentValidationFail()\r\n      return\r\n    }\r\n\r\n    BlockUserAction.getUserForBlock({'currentUserID': UserStore.getState().loggedInUserId, 'usernameForBlock': content})\r\n  }\r\n\r\n  render () {\r\n    if (UserStore.getState().loggedInUserId === '') {\r\n      return <Redirect to='/user/login' />\r\n    }\r\n\r\n    return (\r\n      <Form\r\n        title='Block user'\r\n        handleSubmit={this.handleSubmit.bind(this)}\r\n        submitState={this.state.formSubmitState}\r\n        message={this.state.message} >\r\n\r\n        <TextGroup\r\n          type='text'\r\n          value={this.state.content}\r\n          label='Block user'\r\n          handleChange={BlockUserAction.handleContentChange}\r\n          validationState={this.state.contentValidationState} />\r\n\r\n        <Submit\r\n          type='btn-primary'\r\n          value='Block' />\r\n\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport FooterStore from '../stores/FooterStore'\r\n\r\nexport default class Footer extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = FooterStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    FooterStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    FooterStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <footer>\r\n        <div className='container' >\r\n          <div className='row' >\r\n            <div className='col-sm-5' >\r\n              <h3 className='lead' >\r\n                <strong>Information</strong> and\r\n                <strong> Copyright</strong>\r\n              </h3>\r\n              <p>\r\n                Powered by\r\n                <strong> Express</strong>,\r\n                <strong> MongoDB</strong> and\r\n                <strong> React</strong>\r\n              </p>\r\n              <p>@2017 SoftUni.</p>\r\n            </div>\r\n            <div className='col-sm-3' >\r\n              <h3 className='lead' >Author</h3>\r\n              <a href='https://github.com/AndrianStoikov/ReactJs-Fundamentals-TeamWork' >\r\n                <strong> Team Unknown </strong>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport UserStore from '../stores/UserStore'\r\nimport HomeStore from '../stores/HomeStore'\r\nimport HomeActions from '../actions/HomeActions'\r\n\r\nimport PostCard from './sub-components/PostCard'\r\nimport Helpers from '../utilities/Helpers'\r\n\r\nexport default class Home extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = HomeStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  getUserPosts () {\r\n    if (UserStore.getState().loggedInUserId === '') {\r\n      return\r\n    }\r\n\r\n    let request = {\r\n      url: '/api/posts/all',\r\n      method: 'get'\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(data => HomeActions.getUserPostsSuccess(data))\r\n      .fail(err => HomeActions.getUserPostsFail(err))\r\n  }\r\n\r\n  componentDidMount () {\r\n    HomeStore.listen(this.onChange)\r\n    this.getUserPosts()\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    HomeStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    let posts = this.state.posts.map((post, index) => {\r\n      let postId = post._id\r\n\r\n      let likeRequest = {\r\n        url: `/api/post/like/${postId}`,\r\n        method: 'post'\r\n      }\r\n      let unlikeRequest = {\r\n        url: `/api/post/unlike/${postId}`,\r\n        method: 'post'\r\n      }\r\n\r\n      return (\r\n        <PostCard\r\n          key={post._id}\r\n          post={post}\r\n          index={index}\r\n          likePost={Helpers.likePost.bind(this, likeRequest, this.getUserPosts)}\r\n          unlikePost={Helpers.unlikePost.bind(this, unlikeRequest, this.getUserPosts)}\r\n        />\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div className='container' >\r\n        <h3 className='text-center' >Welcome to\r\n          <strong> Simple Social Network</strong>\r\n        </h3>\r\n        {posts}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Auth from '../components/Auth'\r\nimport NavbarActions from '../actions/NavbarActions'\r\nimport NavbarStore from '../stores/NavbarStore'\r\nimport NavbarUserMenu from './sub-components/NavbarUserMenu'\r\n\r\nexport default class Navbar extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = NavbarStore.getState()\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    NavbarStore.listen(this.onChange)\r\n\r\n    $(document).ajaxStart(() => NavbarActions.updateAjaxAnimation('fadeIn'))\r\n    $(document).ajaxComplete(() => NavbarActions.updateAjaxAnimation('fadeOut'))\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    NavbarStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    let navbarUserMenu = <NavbarUserMenu />\r\n    return (\r\n      <nav className='navbar navbar-default navbar-static-top' >\r\n        <div className='navbar-header' >\r\n          <button\r\n            type='button'\r\n            className='navbar-toggle collapsed'\r\n            data-toggle='collapse'\r\n            data-target='#navbar' >\r\n            <span className='sr-only' >Toggle navigation</span>\r\n            <span className='icon-bar' />\r\n            <span className='icon-bar' />\r\n            <span className='icon-bar' />\r\n          </button>\r\n          <Link to='/' className='navbar-brand' >\r\n            <span\r\n              ref='triangles'\r\n              className={'triangles animated ' + this.state.ajaxAnimationClass} >\r\n              <div className='tri invert' />\r\n              <div className='tri invert' />\r\n              <div className='tri' />\r\n              <div className='tri invert' />\r\n              <div className='tri invert' />\r\n              <div className='tri' />\r\n              <div className='tri invert' />\r\n              <div className='tri' />\r\n              <div className='tri invert' />\r\n            </span>\r\n            SSN\r\n          </Link>\r\n        </div>\r\n        <div id='navbar' className='navbar-collapse collapse' >\r\n          { Auth.isUserAuthenticated() ? (\r\n            <ul className='nav navbar-nav' >\r\n              <li>\r\n                <Link to='/' >Home</Link>\r\n              </li>\r\n              <li>\r\n                <Link to='/post/add' >AddPost</Link>\r\n              </li>\r\n              <li>\r\n                <Link to='/post/edit/595dee886b217e0e34a4862d' >EditPost(testing)</Link>\r\n              </li>\r\n            </ul>\r\n          ) : (\r\n            <ul className='nav navbar-nav' >\r\n              <li>\r\n                <Link to='/' >Home</Link>\r\n              </li>\r\n            </ul>\r\n          )}\r\n          {navbarUserMenu}\r\n        </div>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport FormStore from '../stores/FormStore'\r\nimport UserStore from '../stores/UserStore'\r\n\r\nimport FormActions from '../actions/FormActions'\r\nimport UserActions from '../actions/UserActions'\r\nimport Form from './form/Form'\r\nimport TextGroup from './form/TextGroup'\r\nimport Submit from './form/Submit'\r\n\r\nexport default class UserLogin extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = FormStore.getState()\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    FormStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    FormStore.unlisten(this.onChange)\r\n  }\r\n\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n\r\n    let username = this.state.username\r\n    let password = this.state.password\r\n    if (!username) {\r\n      FormActions.usernameValidationFail()\r\n      return\r\n    }\r\n\r\n    if (!password) {\r\n      FormActions.passwordValidationFail()\r\n      return\r\n    }\r\n\r\n    UserActions.loginUser({username, password})\r\n  }\r\n\r\n  render () {\r\n    if (UserStore.getState().loggedInUserId !== '') {\r\n      return <Redirect to='/' />\r\n    }\r\n\r\n    return (\r\n      <Form\r\n        title='Login'\r\n        handleSubmit={this.handleSubmit.bind(this)}\r\n        submitState={this.state.formSubmitState}\r\n        message={this.state.message} >\r\n\r\n        <TextGroup\r\n          type='text'\r\n          value={this.state.username}\r\n          label='Username'\r\n          handleChange={FormActions.handleUsernameChange}\r\n          validationState={this.state.usernameValidationState} />\r\n\r\n        <TextGroup\r\n          type='password'\r\n          value={this.state.password}\r\n          label='Password'\r\n          handleChange={FormActions.handlePasswordChange}\r\n          validationState={this.state.passwordValidationState}\r\n          message={this.state.message} />\r\n\r\n        <Submit\r\n          type='btn-primary'\r\n          value='Login' />\r\n\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport UserActions from '../actions/UserActions'\r\nimport UserStore from '../stores/UserStore'\r\n\r\nimport UserInfo from './sub-components/user-profile/UserInfo'\r\nimport UserPosts from './sub-components/user-profile/UserPosts'\r\n\r\nexport default class UserProfile extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = UserStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  getUserOwnPosts () {\r\n    let request = {\r\n      url: `/api/post/own/${this.props.match.params.userId}`,\r\n      method: 'get'\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(posts => UserActions.getUserOwnPostsSuccess(posts))\r\n      .fail(() => UserActions.getUserOwnPostsFail())\r\n  }\r\n\r\n  getUserInformation () {\r\n    let userId = this.props.match.params.userId\r\n    let request = {\r\n      url: `/api/user/${userId}`,\r\n      method: 'get'\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(userInfo => UserActions.getProfileInfoSuccess(userInfo))\r\n  }\r\n\r\n  componentDidMount () {\r\n    UserStore.listen(this.onChange)\r\n    this.getUserOwnPosts()\r\n    this.getUserInformation()\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    UserStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    let nodes = {}\r\n    nodes.roles = this.state.roles.map((role, index) => {\r\n      return (\r\n        <h4 key={index} className='lead' >\r\n          <strong>{role}</strong>\r\n        </h4>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        <UserInfo\r\n          name={this.state.name}\r\n          roles={this.state.roles}\r\n          profile={this.state.profile} />\r\n        <UserPosts\r\n          posts={this.state.userPosts}\r\n          getUserPosts={this.getUserOwnPosts.bind(this)}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nimport FormActions from '../actions/FormActions'\r\nimport UserActions from '../actions/UserActions'\r\n\r\nimport FormStore from '../stores/FormStore'\r\nimport UserStore from '../stores/UserStore'\r\n\r\nimport Form from './form/Form'\r\nimport TextGroup from './form/TextGroup'\r\nimport RadioGroup from './form/RadioGroup'\r\nimport RadioElement from './form/RadioElement'\r\nimport Submit from './form/Submit'\r\n\r\nexport default class UserRegister extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = FormStore.getState()\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    FormStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    FormStore.unlisten(this.onChange)\r\n  }\r\n\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n\r\n    let data = {\r\n      username: this.state.username,\r\n      password: this.state.password,\r\n      confirmedPassword: this.state.confirmedPassword,\r\n      firstName: this.state.firstName,\r\n      lastName: this.state.lastName,\r\n      age: this.state.age,\r\n      gender: this.state.gender\r\n    }\r\n\r\n    if (!data.username) {\r\n      return FormActions.usernameValidationFail()\r\n    }\r\n\r\n    if (!data.password || !data.confirmedPassword || data.password !== data.confirmedPassword) {\r\n      return FormActions.passwordValidationFail()\r\n    }\r\n\r\n    UserActions.registerUser(data)\r\n  }\r\n\r\n  render () {\r\n    if (UserStore.getState().loggedInUserId !== '') {\r\n      return <Redirect to='/' />\r\n    }\r\n\r\n    return (\r\n      <Form\r\n        title='Register'\r\n        handleSubmit={this.handleSubmit.bind(this)}\r\n        submitState={this.state.formSubmitState}\r\n        message={this.state.message} >\r\n\r\n        <TextGroup\r\n          type='text'\r\n          label='Username'\r\n          value={this.state.username}\r\n          autoFocus='true'\r\n          handleChange={FormActions.handleUsernameChange}\r\n          validationState={this.state.usernameValidationState}\r\n          message={this.state.message} />\r\n\r\n        <TextGroup\r\n          type='password'\r\n          label='Password'\r\n          value={this.state.Password}\r\n          handleChange={FormActions.handlePasswordChange}\r\n          validationState={this.state.passwordValidationState}\r\n          message={this.state.message} />\r\n\r\n        <TextGroup\r\n          type='password'\r\n          label='Confirm Password'\r\n          value={this.state.confirmPassword}\r\n          handleChange={FormActions.handleConfirmedPasswordChange}\r\n          validationState={this.state.passwordValidationState}\r\n          message={this.state.message} />\r\n\r\n        <TextGroup\r\n          type='text'\r\n          label='First Name'\r\n          handleChange={FormActions.handleFirstNameChange}\r\n          value={this.state.firstName} />\r\n\r\n        <TextGroup\r\n          type='text'\r\n          label='Last Name'\r\n          handleChange={FormActions.handleLastNameChange}\r\n          value={this.state.lastName} />\r\n\r\n        <TextGroup\r\n          type='number'\r\n          label='Age'\r\n          handleChange={FormActions.handleAgeChange}\r\n          value={this.state.age} />\r\n\r\n        <RadioGroup\r\n          validationState={this.state.genderValidationState}\r\n          message={this.state.message} >\r\n          <RadioElement\r\n            groupName='gender'\r\n            value='Male'\r\n            selectedValue={this.state.gender}\r\n            handleChange={FormActions.handleGenderChange} />\r\n\r\n          <RadioElement\r\n            groupName='gender'\r\n            value='Female'\r\n            selectedValue={this.state.gender}\r\n            handleChange={FormActions.handleGenderChange} />\r\n        </RadioGroup>\r\n\r\n        <Submit type='btn-primary' value='Register' />\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Form extends Component {\r\n  render () {\r\n    return (\r\n      <div className='container' >\r\n        <div className='row flipInX animated' >\r\n          <div className='col-sm-8' >\r\n            <div className='panel panel-default' >\r\n              <div className='panel-heading' >{this.props.title}</div>\r\n              <div className='panel-body' >\r\n                <form onSubmit={this.props.handleSubmit} >\r\n                  <div className={`form-group ${this.props.submitState}`} >\r\n                    <span className={`help-block`} >{this.props.message}</span>\r\n                  </div>\r\n                  {this.props.children}\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class RadioElement extends Component {\r\n  render () {\r\n    return (\r\n      <div className='radio radio-inline' >\r\n        <input\r\n          type='radio'\r\n          name={this.props.groupName}\r\n          id={this.props.value.toLowerCase()}\r\n          value={this.props.value}\r\n          checked={this.props.selectedValue === this.props.value}\r\n          onChange={this.props.handleChange} />\r\n        <label htmlFor={this.props.value.toLowerCase()} >{this.props.value}</label>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class RadioGroup extends Component {\r\n  render () {\r\n    return (\r\n      <div className={`form-group ${this.props.validationState}`} >\r\n        <span className='help-block' >{this.props.message}</span>\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Submit extends Component {\r\n  render () {\r\n    return <input type='submit' className={`btn ${this.props.type}`} value={this.props.value} />\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class TextGroup extends Component {\r\n  render () {\r\n    return (\r\n      <div className={'form-group ' + this.props.validationState} >\r\n        <label className='control-label' >{this.props.label}</label>\r\n        <input\r\n          type={this.props.type} className='form-control'\r\n          value={this.props.value}\r\n          onChange={this.props.handleChange} autoFocus={this.props.autoFocus} />\r\n        <span className='help-block' >{this.props.message}</span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport UserStore from '../../stores/UserStore'\r\nimport PostAddStore from '../../stores/PostAddStore'\r\nimport PostAddActions from '../../actions/PostAddActions'\r\nimport Form from '../form/Form'\r\nimport TextGroup from '../form/TextGroup'\r\nimport Submit from '../form/Submit'\r\n\r\nexport default class PostAdd extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = PostAddStore.getState()\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    PostAddStore.listen(this.onChange)\r\n    PostAddActions.loadPostAddForm()\r\n  }\r\n\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n\r\n    let content = this.state.content\r\n    if (content === '') {\r\n      PostAddActions.contentValidationFail()\r\n      return\r\n    }\r\n\r\n    PostAddActions.addPost({'authorId': UserStore.getState().loggedInUserId, 'content': content})\r\n  }\r\n\r\n  render () {\r\n    if (UserStore.getState().loggedInUserId === '') {\r\n      return <Redirect to='/user/login' />\r\n    }\r\n\r\n    return (\r\n      <Form\r\n        title='New Post'\r\n        handleSubmit={this.handleSubmit.bind(this)}\r\n        submitState={this.state.formSubmitState}\r\n        message={this.state.message}>\r\n\r\n        <TextGroup\r\n          type='text'\r\n          value={this.state.content}\r\n          label='Your Post'\r\n          handleChange={PostAddActions.handleContentChange}\r\n          validationState={this.state.contentValidationState} />\r\n\r\n        <Submit\r\n          type='btn-primary'\r\n          value='Post' />\r\n\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport UserStore from '../../stores/UserStore'\r\nimport PostEditStore from '../../stores/PostEditStore'\r\nimport PostEditActions from '../../actions/PostEditActions'\r\nimport Form from '../form/Form'\r\nimport TextGroup from '../form/TextGroup'\r\nimport Submit from '../form/Submit'\r\n\r\nexport default class PostEdit extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = PostEditStore.getState()\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    PostEditStore.listen(this.onChange)\r\n    if (UserStore.getState().loggedInUserId !== '') {\r\n      let postId = this.props.match.params.postId\r\n      PostEditActions.getEditPostInfo(postId)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    PostEditStore.unlisten(this.onChange)\r\n  }\r\n\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n\r\n    let content = this.state.content\r\n    if (content === '') {\r\n      PostEditActions.contentValidationFail()\r\n      return\r\n    }\r\n\r\n    PostEditActions.editPost({ 'content': content, 'postId': this.props.match.params.postId })\r\n  }\r\n\r\n  render () {\r\n    if (UserStore.getState().loggedInUserId === '') {\r\n      return <Redirect to='/user/login' />\r\n    }\r\n\r\n    return (\r\n      <Form\r\n        title='Edit Post'\r\n        handleSubmit={this.handleSubmit.bind(this)}\r\n        submitState={this.state.formSubmitState}\r\n        message={this.state.message} >\r\n\r\n        <TextGroup\r\n          type='text'\r\n          value={this.state.content}\r\n          label='Your Post'\r\n          handleChange={PostEditActions.handleContentChange}\r\n          validationState={this.state.contentValidationState} />\r\n\r\n        <Submit\r\n          type='btn-primary'\r\n          value='Edit Post' />\r\n\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport FormStore from '../../stores/FormStore'\r\nimport FormActions from '../../actions/FormActions'\r\n// import PostActions from '../../actions/PostActions'\r\n\r\nexport default class CommentsForm extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = FormStore.getState()\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    FormStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    FormStore.unlisten(this.onChange)\r\n  }\r\n\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n\r\n    if (!this.state.comment) {\r\n      FormActions.commentValidationFail()\r\n      return\r\n    }\r\n\r\n    // PostActions.addComment(this.props.movieId, this.state.comment)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <form onSubmit={this.handleSubmit.bind(this)} >\r\n        <div className={`form-group ${this.state.commentValidationState}`} >\r\n          <label className='control-label' htmlFor='content' >Add comment</label>\r\n          <textarea\r\n            id='content'\r\n            className='form-control'\r\n            value={this.state.comment}\r\n            onChange={FormActions.handleCommentChange}\r\n            rows='5' />\r\n          <span className={`help-block`} >{ this.state.message }</span>\r\n        </div>\r\n        <div className='form-group' >\r\n          <input type='submit' className='btn btn-primary' value='Comment' />\r\n        </div>\r\n      </form>\r\n    )\r\n  }\r\n\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Auth from '../../components/Auth'\r\n\r\nimport UserActions from '../../actions/UserActions'\r\nimport UserStore from '../../stores/UserStore'\r\n\r\nexport default class NavbarUserMenu extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = UserStore.getState()\r\n\r\n    if (Auth.isUserAuthenticated()) {\r\n      let user = Auth.getUser()\r\n      this.state.username = user.username\r\n    }\r\n\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentDidMount () {\r\n    UserStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    UserStore.unlisten(this.onChange)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        { Auth.isUserAuthenticated() ? (\r\n          <ul className='nav navbar-nav pull-right' >\r\n            <li>\r\n              <div className='navbar-text'>\r\n                Hello, {this.state.username}\r\n              </div>\r\n            </li>\r\n            <li>\r\n              <Link to={`/user/profile/${this.state.loggedInUserId}`} >Profile</Link>\r\n            </li>\r\n            <li>\r\n              <a href='#' onClick={UserActions.logoutUser} >Logout</a>\r\n            </li>\r\n          </ul>\r\n        ) : (\r\n          <ul className='nav navbar-nav pull-right' >\r\n            <li>\r\n              <Link to='/user/login' >Login</Link>\r\n            </li>\r\n            <li>\r\n              <Link to='/user/register' >Register</Link>\r\n            </li>\r\n          </ul>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport UserStore from '../../stores/UserStore'\r\n\r\nimport PostInfo from './PostInfo'\r\nimport PostPanelsToggle from './PostPanelsToggle'\r\nimport PostVotePanel from './PostVotePanel'\r\nimport PostCommentsPanel from './PostCommentsPanel'\r\n\r\nexport default class PostCard extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      showCommentsPanel: false\r\n    }\r\n  }\r\n\r\n  toggleCommentsPanel () {\r\n    this.setState(prevState => ({\r\n      showCommentsPanel: !prevState.showCommentsPanel,\r\n      showVotePanel: false\r\n    }))\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='animated fadeIn' >\r\n        <div className='media movie' >\r\n          <span className='position pull-left' >{ this.props.index + 1 }</span>\r\n          <PostInfo post={this.props.post} />\r\n          <PostPanelsToggle\r\n            userId={UserStore.getState().loggedInUserId}\r\n            toggleCommentsPanel={this.toggleCommentsPanel.bind(this)}\r\n            showCommentsPanel={this.state.showCommentsPanel}\r\n            likePost={this.props.likePost}\r\n            unlikePost={this.props.unlikePost}\r\n            postLikes={this.props.post.likes}\r\n            movieId={this.props.post._id} />\r\n        </div>\r\n        {this.state.showCommentsPanel\r\n          ? <PostCommentsPanel comments={this.props.post.comments} postId={this.props.post._id} /> : null}\r\n        <div id='clear' />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport CommentForm from './CommentsForm'\r\n\r\nexport default class PostCommentsPanel extends React.Component {\r\n  render () {\r\n    let comments = this.props.comments.map(comment => {\r\n      return (\r\n        <div key={comment._id} className='comment col-sm-9 list-group-item animated fadeIn' >\r\n          <div className='media' >\r\n            <div className='media-body' >\r\n              <p>{comment.content}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div className='list-group' >\r\n        <h3 className='col-sm-3' >Comments:</h3>\r\n        { comments }\r\n        <div className='col-sm-6 col-xs-offset-6 list-group-item animated fadeIn' >\r\n          <div className='media' >\r\n            <CommentForm movieId={this.props.post} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class PostInfo extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className='media-body' >\r\n        <h4 className='media-heading' >\r\n          <Link to={`/movie/${this.props.post._id}/${this.props.post.name}`} >\r\n            { this.props.post.name }\r\n          </Link>\r\n        </h4>\r\n        <br />\r\n        <p>{ this.props.post.content }</p>\r\n        <span className='votes' >Likes:\r\n                    <strong> { this.props.post.likes.length }</strong>\r\n        </span>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class PostPanelToggles extends React.Component {\r\n\r\n  isLiked () {\r\n    let likes = this.props.postLikes\r\n    for (let like of likes) {\r\n      if (this.props.userId === like.toString()) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  render () {\r\n    let likeButton\r\n    if (this.isLiked()) {\r\n      likeButton = <a\r\n        className='btn btn-primary'\r\n        onClick={this.props.unlikePost} >\r\n        Unlike\r\n      </a>\r\n    } else {\r\n      likeButton = <a\r\n        className='btn btn-primary'\r\n        onClick={this.props.likePost} >\r\n        Like\r\n      </a>\r\n    }\r\n    return (\r\n      <div className='pull-right btn-group' >\r\n        <a\r\n          className='btn btn-primary'\r\n          onClick={this.props.toggleCommentsPanel} >\r\n          {this.props.showCommentsPanel ? 'Hide' : 'Comments'}\r\n        </a>\r\n        {likeButton}\r\n        <Link to={`/movie/${this.props.movieId}/review/add`} className='btn btn-warning' >\r\n          Write review\r\n        </Link>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport FormActions from '../../actions/FormActions'\r\n// import MovieActions from '../../actions/PostActions'\r\nimport FormStore from '../../stores/FormStore'\r\n\r\nexport default class PostVotePanel extends Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = FormStore.getState()\r\n    this.onChange = this.onChange.bind(this)\r\n  }\r\n\r\n  onChange (state) {\r\n    this.setState(state)\r\n  }\r\n\r\n  componentWillMount () {\r\n    FormStore.listen(this.onChange)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    FormStore.unlisten(this.onChange)\r\n  }\r\n\r\n  handleSubmit (e) {\r\n    e.preventDefault()\r\n\r\n    if (this.state.score > 10) {\r\n      FormActions.scoreValidationFail()\r\n      return\r\n    }\r\n\r\n    // MovieActions.addVote(this.props.movieId, this.state.score)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='col-sm-4 col-xs-offset-8 list-group-item animated fadeIn vote' >\r\n        <div className='media' >\r\n          <div className='media-body' >\r\n            <div className={`form-group ${this.state.scoreValidationState}`} >\r\n              <span className='help-block' >{this.state.message}</span>\r\n            </div>\r\n            <form className='form-inline' onSubmit={this.handleSubmit.bind(this)} >\r\n              <div className={`form-group ${this.state.scoreValidationState}`} >\r\n                <label className='control-label' >Score</label>\r\n                <input\r\n                  className='form-control'\r\n                  step='0.1'\r\n                  type='number'\r\n                  value={this.state.score || this.props.loggedInUserScore}\r\n                  onChange={FormActions.handleScoreChange} />\r\n                <input className='btn btn-primary' type='submit' value='Vote' />\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default class UserInfo extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className='container profile-container'>\r\n        <div className='profile-img'>\r\n          <img src='/images/user-default.png' />\r\n        </div>\r\n        <div className='profile-info clearfix'>\r\n          <h2><strong>First Name: { this.props.profile.userFirstName }</strong></h2>\r\n          <h2><strong>Last Name: { this.props.profile.userLastName }</strong></h2>\r\n          <h2><strong>Gender: { this.props.profile.gender }</strong></h2>\r\n          <h2><strong>Username: { this.props.profile.userUsername }</strong></h2>\r\n          <h2><strong>Age: { this.props.profile.userAge }</strong></h2>\r\n          <h4 className='lead'><Link className='label' to='/user/block'>Block user</Link></h4>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\n\r\nimport UserPostsPanel from './UserPostsPanel'\r\n\r\nexport default class UserPosts extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      showPostsPanel: false\r\n    }\r\n  }\r\n\r\n  togglePosts () {\r\n    this.setState(prevState => ({\r\n      showPostsPanel: !prevState.showPostsPanel\r\n    }))\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className='container profile-container' >\r\n        <div className='profile-stats clearfix' >\r\n          <ul>\r\n            <li>\r\n              <span className='stats-number' >{this.props.posts ? this.props.posts.length : 0 }</span>Posts\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className='pull-right btn-group' >\r\n          <a className='btn btn-primary' onClick={this.togglePosts.bind(this)} >\r\n            {this.state.showPostsPanel ? 'Hide' : 'Show User Posts' }\r\n          </a>\r\n        </div>\r\n        <div className='user-posts' >\r\n          {this.state.showPostsPanel\r\n            ? <UserPostsPanel posts={this.props.posts} getUserPost={this.props.getUserPosts} /> : null}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react'\r\n\r\nimport PostCard from '../PostCard'\r\n\r\nimport Helpers from '../../../utilities/Helpers'\r\n\r\nexport default class UserPostsPanel extends React.Component {\r\n\r\n  likePost () {\r\n    let postId = this.props.post._id\r\n    let request = {\r\n      url: `/api/post/like/${postId}`,\r\n      method: 'post'\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(() => this.props.getUserPosts())\r\n  }\r\n\r\n  unlikePost () {\r\n    let postId = this.props.post._id\r\n    let request = {\r\n      url: `/api/post/unlike/${postId}`,\r\n      method: 'post'\r\n    }\r\n\r\n    $.ajax(request)\r\n      .done(() => this.props.getUserPosts())\r\n  }\r\n\r\n  render () {\r\n    let posts = this.props.posts.map((post, index) => {\r\n      let postId = post._id\r\n\r\n      let likeRequest = {\r\n        url: `/api/post/like/${postId}`,\r\n        method: 'post'\r\n      }\r\n      let unlikeRequest = {\r\n        url: `/api/post/unlike/${postId}`,\r\n        method: 'post'\r\n      }\r\n\r\n      return (\r\n        <PostCard\r\n          key={post._id}\r\n          index={index}\r\n          post={post}\r\n          likePost={Helpers.likePost.bind(this, likeRequest, this.props.getUserPost)}\r\n          unlikePost={Helpers.unlikePost.bind(this, unlikeRequest, this.props.getUserPost)}\r\n        />\r\n      )\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        {posts}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport {BrowserRouter} from 'react-router-dom'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './components/App'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('app')\r\n)\r\n","import React from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport Home from './components/Home'\r\n\r\nimport UserProfile from './components/UserProfile'\r\nimport UserLogin from './components/UserLogin'\r\nimport UserRegister from './components/UserRegister'\r\nimport PostAdd from './components/post/PostAdd'\r\nimport PostEdit from './components/post/PostEdit'\r\nimport BlockUser from './components/BlockUser'\r\n\r\nconst Routes = () => (\r\n  <Switch>\r\n    <Route exact path='/' component={Home} />\r\n    <Route path='/user/profile/:userId' component={UserProfile} />\r\n    <Route exact path='/user/login' component={UserLogin} />\r\n    <Route exact path='/user/register' component={UserRegister} />\r\n    <Route exact path='/post/add' component={PostAdd} />\r\n    <Route exact path='/post/edit/:postId' component={PostEdit} />\r\n    <Route exact path='/user/block' component={BlockUser} />\r\n    <Route component={Home} />\r\n  </Switch>\r\n)\r\n\r\nexport default Routes\r\n","import BlockUserActions from '../actions/BlockUserActions'\r\nimport alt from '../alt'\r\n\r\nclass BlockUserStore {\r\n  constructor () {\r\n    this.bindActions(BlockUserActions)\r\n\r\n    this.content = ''\r\n    this.contentValidationState = ''\r\n    this.message = ''\r\n    this.formSubmitState = ''\r\n  }\r\n\r\n  onBlockUserFail (err) {\r\n    console.log('Failed to block user', err)\r\n  }\r\n\r\n  onBlockUserSuccess () {\r\n    this.content = ''\r\n    this.contentValidationState = ''\r\n    this.message = 'User blocked'\r\n    this.formSubmitState = ''\r\n  }\r\n\r\n  onHandleContentChange (e) {\r\n    this.content = e.target.value\r\n  }\r\n\r\n  onContentValidationFail () {\r\n    this.contentValidationState = 'has-error'\r\n    this.message = 'Enter username of user who want to block'\r\n    this.formSubmitState = ''\r\n  }\r\n}\r\n\r\nexport default alt.createStore(BlockUserStore)\r\n","import alt from '../alt'\r\nimport FooterActions from '../actions/FooterActions'\r\n\r\nclass FooterStore {\r\n  constructor () {\r\n    this.bindActions(FooterActions)\r\n  }\r\n}\r\n\r\nexport default alt.createStore(FooterStore)\r\n","import alt from '../alt'\r\n\r\nimport FormActions from '../actions/FormActions'\r\nimport UserActions from '../actions/UserActions'\r\n\r\nclass FormStore {\r\n  constructor () {\r\n    this.bindActions(FormActions)\r\n    this.bindListeners({\r\n      onRegisterUserFail: UserActions.registerUserFail,\r\n      onRegisterUserSuccess: UserActions.registerUserSuccess,\r\n      onLoginUserSuccess: UserActions.loginUserSuccess,\r\n      onLoginUserFail: UserActions.loginUserFail,\r\n      onLogoutUserSuccess: UserActions.logoutUserSuccess\r\n    })\r\n\r\n    this.username = ''\r\n    this.password = ''\r\n    this.confirmedPassword = ''\r\n    this.firstName = ''\r\n    this.lastName = ''\r\n    this.age = ''\r\n    this.gender = ''\r\n    this.formSubmitState = ''\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.message = ''\r\n  }\r\n\r\n  onRegisterUserSuccess () {\r\n    console.log('FormStore register success')\r\n\r\n    this.formSubmitState = 'has-success'\r\n    this.username = ''\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.message = 'User register success'\r\n  }\r\n\r\n  onRegisterUserFail (err) {\r\n    console.log('FormStore register fail', err)\r\n    if (err.code === 11000) {\r\n      this.usernameValidationState = 'has-error'\r\n      this.message = 'Username already in use'\r\n      return\r\n    }\r\n\r\n    this.formSubmitState = 'has-error'\r\n    this.message = err.errmsg\r\n  }\r\n\r\n  onUsernameValidatonFail () {\r\n    this.usernameValidationState = 'has-error'\r\n    this.passwordValidationState = ''\r\n    this.formSubmitState = ''\r\n    this.message = 'Enter username'\r\n  }\r\n\r\n  onPasswordValidationFail () {\r\n    this.passwordValidationState = 'has-error'\r\n    this.usernameValidationState = ''\r\n    this.formSubmitState = ''\r\n    this.message = 'Invalid password, or password doest not match'\r\n  }\r\n\r\n  onHandleUsernameChange (e) {\r\n    this.username = e.target.value\r\n  }\r\n\r\n  onHandlePasswordChange (e) {\r\n    this.password = e.target.value\r\n  }\r\n\r\n  onHandleConfirmedPasswordChange (e) {\r\n    this.confirmedPassword = e.target.value\r\n  }\r\n\r\n  onHandleFirstNameChange (e) {\r\n    this.firstName = e.target.value\r\n  }\r\n\r\n  onHandleLastNameChange (e) {\r\n    this.lastName = e.target.value\r\n  }\r\n\r\n  onHandleAgeChange (e) {\r\n    this.age = e.target.value\r\n  }\r\n\r\n  onHandleGenderChange (e) {\r\n    this.gender = e.target.value\r\n  }\r\n\r\n  onLoginUserSuccess () {\r\n    this.formSubmitState = 'has-success'\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.message = 'User login successful'\r\n  }\r\n\r\n  onLoginUserFail (err) {\r\n    this.formSubmitState = 'has-error'\r\n    this.usernameValidationState = 'has-error'\r\n    this.passwordValidationState = 'has-error'\r\n    this.message = err.message\r\n  }\r\n\r\n  onUnauthorizedAccessAttempt () {\r\n    this.formSubmitState = 'has-error'\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.message = 'Please login'\r\n  }\r\n\r\n  onLogoutUserSuccess () {\r\n    this.formSubmitState = ''\r\n    this.usernameValidationState = ''\r\n    this.passwordValidationState = ''\r\n    this.message = ''\r\n  }\r\n}\r\n\r\nexport default alt.createStore(FormStore)\r\n","import alt from '../alt'\r\nimport HomeActions from '../actions/HomeActions'\r\n\r\nclass HomeStore {\r\n  constructor () {\r\n    this.bindActions(HomeActions)\r\n\r\n    this.posts = []\r\n  }\r\n\r\n  onGetUserPostsSuccess (data) {\r\n    this.posts = data\r\n  }\r\n\r\n  onRemovePostsSuccess () {\r\n    this.posts = []\r\n  }\r\n}\r\n\r\nexport default alt.createStore(HomeStore)\r\n","import alt from '../alt'\r\nimport NavbarActions from '../actions/NavbarActions'\r\n\r\nclass NavbarStore {\r\n  constructor () {\r\n    this.bindActions(NavbarActions)\r\n\r\n    this.ajaxAnimationClass = ''\r\n  }\r\n\r\n  onUpdateAjaxAnimation (animationClass) {\r\n    this.ajaxAnimationClass = animationClass\r\n  }\r\n}\r\n\r\nexport default alt.createStore(NavbarStore)\r\n","import PostAddActions from '../actions/PostAddActions'\r\nimport alt from '../alt'\r\n\r\nclass PostAddStore {\r\n  constructor () {\r\n    this.bindActions(PostAddActions)\r\n\r\n    this.author = ''\r\n    this.content = ''\r\n    this.contentValidationState = ''\r\n    this.message = ''\r\n    this.formSubmitState = ''\r\n  }\r\n\r\n  onAddPostSuccess (post) {\r\n    console.log('Added post')\r\n    this.content = ''\r\n    this.contentValidationState = ''\r\n    this.message = 'Post added'\r\n    this.formSubmitState = ''\r\n  }\r\n\r\n  onAddPostFail (err) {\r\n    console.log('Failed to add post', err)\r\n  }\r\n\r\n  onHandleContentChange (e) {\r\n    this.content = e.target.value\r\n    this.helpBlock = ''\r\n  }\r\n\r\n  onContentValidationFail () {\r\n    this.contentValidationState = 'has-error'\r\n    this.message = 'Enter post content'\r\n    this.formSubmitState = ''\r\n  }\r\n\r\n  onLoadPostAddForm () {\r\n    this.content = ''\r\n    this.contentValidationState = ''\r\n    this.message = ''\r\n    this.formSubmitState = ''\r\n  }\r\n}\r\n\r\nexport default alt.createStore(PostAddStore)\r\n","import PostEditActions from '../actions/PostEditActions'\r\nimport alt from '../alt'\r\n\r\nclass PostEditStore {\r\n  constructor () {\r\n    this.bindActions(PostEditActions)\r\n\r\n    this.author = ''\r\n    this.content = ''\r\n    this.contentValidationState = ''\r\n    this.message = ''\r\n    this.formSubmitState = ''\r\n  }\r\n\r\n  onGetEditPostInfoSuccess (data) {\r\n    this.message = ''\r\n    this.content = data.content\r\n  }\r\n\r\n  onGetEditPostInfoFail (err) {\r\n    this.message = 'Failed to load edit info'\r\n    console.log('Failed to load edit info', err)\r\n  }\r\n\r\n  onEditPostSuccess (post) {\r\n    console.log('Post edited')\r\n    this.contentValidationState = ''\r\n    this.message = 'Post edited'\r\n    this.formSubmitState = ''\r\n  }\r\n\r\n  onEditPostFail (err) {\r\n    console.log('Failed to edit post', err)\r\n  }\r\n\r\n  onHandleContentChange (e) {\r\n    this.content = e.target.value\r\n    this.helpBlock = ''\r\n  }\r\n\r\n  onContentValidationFail () {\r\n    this.contentValidationState = 'has-error'\r\n    this.message = 'Enter post content'\r\n    this.formSubmitState = ''\r\n  }\r\n}\r\n\r\nexport default alt.createStore(PostEditStore)\r\n","import alt from '../alt'\r\nimport Auth from '../components/Auth'\r\nimport UserActions from '../actions/UserActions'\r\n\r\nclass UserStore {\r\n  constructor () {\r\n    this.bindActions(UserActions)\r\n\r\n    this.loggedInUserId = ''\r\n    this.username = ''\r\n    this.roles = []\r\n    this.userPosts = []\r\n    this.profile = {\r\n      userUsername: '',\r\n      userAge: '',\r\n      userFirstName: '',\r\n      userLastName: '',\r\n      userGender: ''\r\n    }\r\n  }\r\n\r\n  onRegisterUserSuccess (responseData) {\r\n    const user = responseData.user\r\n    this.loggedInUserId = user._id\r\n    this.username = user.username\r\n    this.roles = user.roles\r\n    Auth.authenticateUser(responseData.token)\r\n    Auth.saveUser(user)\r\n  }\r\n\r\n  onLoginUserSuccess (responseData) {\r\n    const user = responseData.user\r\n    this.loggedInUserId = user._id\r\n    this.username = user.username\r\n    this.roles = user.roles\r\n    Auth.authenticateUser(responseData.token)\r\n    Auth.saveUser(user)\r\n  }\r\n\r\n  onLoginUserFail () {\r\n    console.log('Failed loggin attempt')\r\n  }\r\n\r\n  onLogoutUserSuccess () {\r\n    this.loggedInUserId = ''\r\n    this.username = ''\r\n    this.roles = []\r\n    this.userPosts = []\r\n    Auth.deauthenticateUser()\r\n    Auth.removeUser()\r\n  }\r\n\r\n  onGetUserOwnPostsSuccess (posts) {\r\n    this.userPosts = posts\r\n  }\r\n\r\n  onGetUserOwnPostsFail () {\r\n    console.log('Couldn\\'t get user own posts. Problem with the DB')\r\n  }\r\n\r\n  onGetProfileInfoSuccess (user) {\r\n    this.profile.userUsername = user.username\r\n    this.profile.userAge = user.age\r\n    this.profile.userFirstName = user.firstName\r\n    this.profile.userLastName = user.lastName\r\n    this.profile.gender = user.gender\r\n  }\r\n}\r\n\r\nexport default alt.createStore(UserStore)\r\n","import React from 'react'\r\n\r\nexport default class Helpers {\r\n  static appendToArray (value, array) {\r\n    array.push(value)\r\n    return array\r\n  }\r\n\r\n  static prependToArray (value, array) {\r\n    array.unshift(value)\r\n    return array\r\n  }\r\n\r\n  static removeFromArray (value, array) {\r\n    let index = array.indexOf(value)\r\n    if (index !== -1) {\r\n      array.splice(index, 1)\r\n    }\r\n    return array\r\n  }\r\n\r\n  static likePost (request, updateFunction) {\r\n    $.ajax(request)\r\n      .done(() => updateFunction())\r\n      .fail((err) => console.log(err))\r\n  }\r\n\r\n  static unlikePost (request, updateFunction) {\r\n    $.ajax(request)\r\n      .done(() => updateFunction())\r\n      .fail((err) => console.log(err))\r\n  }\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}